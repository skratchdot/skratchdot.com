{"pageProps":{"post":{"year":"2009","month":"12","day":"12","slug":"verify-all-coldfusion-datasources","filename":"2009-12-12-verify-all-coldfusion-datasources.md","html":"<p>Recently I was asked how to programmatically verify ColdFusion DataSources.\nI came up with a few methods of doing so. Each have their pros and cons.</p>\n<h3 id=\"method-1--trycatch-using-cfquery\">Method #1 : Try/Catch using cfquery</h3>\n<p><strong>PROS:</strong></p>\n<ul>\n<li>Can test for \"datasource\" specific behavior by using a custom\ncfquery (ie. <strong>\"SELECT 1\"</strong> vs. <strong>\"SELECT name FROM Customers\"</strong>).\nIf you do this, the query may not work for other datasources, thereby not\nactually testing the validity of the datasource (a CON).</li>\n</ul>\n<p><strong>CONS:</strong></p>\n<ul>\n<li>Uses try/catch.</li>\n<li>Does not work with all datasources. I don't know of a cfquery that will work for all datasources / DBs / etc</li>\n</ul>\n<p><strong>NOTES:</strong></p>\n<p>This is my least favorite, because I couldn't come up with a cfquery to\ntest <em>all</em> datasources. It will work for some datasources, but not all.</p>\n<p><strong>SOURCE:</strong></p>\n<pre><code class=\"hljs language-cfm\">&lt;cffunction name=\"verifyDsnList1\" output=\"true\" returntype=\"void\"&gt;\n    &lt;cfargument name=\"list\" type=\"string\" required=\"true\" /&gt;\n    &lt;cfargument name=\"delimiter\" type=\"string\" required=\"false\" default=\",\" /&gt;\n    &lt;cfset var local = StructNew() /&gt;\n    &lt;cfoutput&gt;\n        &lt;hr /&gt;\n        &lt;b&gt;&lt;u&gt;veriftyDsnList1&lt;/u&gt;&lt;/b&gt;\n        &lt;cfloop list=\"#arguments.list#\" index=\"local.currentName\"&gt;\n            &lt;cftry&gt;\n                &lt;hr /&gt;\n                &lt;cfquery name=\"local.qVerifyDatasource\" datasource=\"#local.currentName#\"&gt;\n                    SELECT 1\n                &lt;/cfquery&gt;\n                &lt;cfif local.qVerifyDatasource.RecordCount gt 0&gt;\n                    DATASOURCE: #local.currentName# [VERIFIED=true]\n                &lt;cfelse&gt;\n                    DATASOURCE: #local.currentName# [VERIFIED=false]\n                &lt;/cfif&gt;\n                &lt;cfcatch&gt;\n                    DATASOURCE: #local.currentName# [VERIFIED=false] [ERROR: #cfcatch.message#]\n                &lt;/cfcatch&gt;\n            &lt;/cftry&gt;\n        &lt;/cfloop&gt;\n        &lt;hr /&gt;\n    &lt;/cfoutput&gt;\n&lt;/cffunction&gt;\n</code></pre>\n<h3 id=\"method-2-trycatch-using-the-datasourceservice-verifydatasource-method\">Method #2: Try/Catch using the DataSourceService verifyDatasource() method.</h3>\n<p><strong>PROS:</strong></p>\n<ul>\n<li>Will work for all datasources.</li>\n<li>Shows \"error\" specific messaging that might help debug why a datasource isn't working.</li>\n</ul>\n<p><strong>CONS:</strong></p>\n<ul>\n<li>Uses try/catch.</li>\n</ul>\n<p><strong>SOURCE:</strong></p>\n<pre><code class=\"hljs language-cfm\">&lt;cffunction name=\"verifyDsnList2\" output=\"true\" returntype=\"void\"&gt;\n    &lt;cfargument name=\"list\" type=\"string\" required=\"true\" /&gt;\n    &lt;cfargument name=\"delimiter\" type=\"string\" required=\"false\" default=\",\" /&gt;\n    &lt;cfset var local = StructNew() /&gt;\n    &lt;cfset local.dsService = CreateObject(\"java\", \"coldfusion.server.ServiceFactory\").DataSourceService /&gt;\n    &lt;cfoutput&gt;\n        &lt;hr /&gt;\n        &lt;b&gt;&lt;u&gt;veriftyDsnList2&lt;/u&gt;&lt;/b&gt;\n        &lt;cfloop list=\"#arguments.list#\" index=\"local.currentName\"&gt;\n            &lt;cftry&gt;\n                &lt;hr /&gt;\n                &lt;cfif local.dsService.verifyDatasource(local.currentName)&gt;\n                    DATASOURCE: #local.currentName# [VERIFIED=true]\n                &lt;cfelse&gt;\n                    DATASOURCE: #local.currentName# [VERIFIED=false]\n                &lt;/cfif&gt;\n                &lt;cfcatch&gt;\n                    DATASOURCE: #local.currentName# [VERIFIED=false] [ERROR: #cfcatch.message#]\n                &lt;/cfcatch&gt;\n            &lt;/cftry&gt;\n        &lt;/cfloop&gt;\n        &lt;hr /&gt;\n    &lt;/cfoutput&gt;\n&lt;/cffunction&gt;\n</code></pre>\n<h3 id=\"method-3-admin-api-verifydsn-call\">Method #3: Admin API verifyDSN() call</h3>\n<p><strong>PROS:</strong></p>\n<ul>\n<li>Will work for all datasources.</li>\n<li>Doesn't use try/catch.</li>\n</ul>\n<p><strong>CONS:</strong></p>\n<ul>\n<li>Need to pass in cfide password. This should never be hardcoded, or kept in plain text.</li>\n<li>Will never output \"error\" specific text (only ever displays true or false).</li>\n</ul>\n<p><strong>SOURCE:</strong></p>\n<pre><code class=\"hljs language-cfm\">&lt;cffunction name=\"verifyDsnList3\" output=\"true\" returntype=\"void\"&gt;\n    &lt;cfargument name=\"cfide_password\" type=\"string\" required=\"true\" /&gt;\n    &lt;cfargument name=\"list\" type=\"string\" required=\"true\" /&gt;\n    &lt;cfargument name=\"delimiter\" type=\"string\" required=\"false\" default=\",\" /&gt;\n    &lt;cfset var local = StructNew() /&gt;\n    &lt;cfset local.admin = createObject(\"component\",\"cfide.adminapi.administrator\").login(arguments.cfide_password) /&gt;\n    &lt;cfset local.dsObj = createObject(\"component\",\"cfide.adminapi.datasource\") /&gt;\n    &lt;cfoutput&gt;\n        &lt;hr /&gt;\n        &lt;b&gt;&lt;u&gt;veriftyDsnList3&lt;/u&gt;&lt;/b&gt;\n        &lt;cfloop list=\"#arguments.list#\" index=\"local.currentName\"&gt;\n            &lt;hr /&gt;\n            DATASOURCE: #local.currentName# [VERIFIED=#local.dsObj.verifyDSN(local.currentName)#]\n        &lt;/cfloop&gt;\n        &lt;hr /&gt;\n    &lt;/cfoutput&gt;\n&lt;/cffunction&gt;\n</code></pre>\n<h3 id=\"helper-function\">Helper Function:</h3>\n<p>Here's a helper function that will return a sorted list of all configured datasource names:</p>\n<pre><code class=\"hljs language-cfm\">&lt;cffunction name=\"getDatasourceList\" output=\"false\" returntype=\"string\"&gt;\n    &lt;cfargument name=\"sort_type\" type=\"string\" required=\"false\" default=\"textnocase\" hint=\"Optional. See livedocs for ListSort().\" /&gt;\n    &lt;cfargument name=\"sort_order\" type=\"string\" required=\"false\" default=\"asc\" hint=\"Optional. See livedocs for ListSort().\" /&gt;\n    &lt;cfargument name=\"delimiter\" type=\"string\" required=\"false\" default=\",\" hint=\"Optional. See livedocs for ListSort().\" /&gt;\n    &lt;cfset var dsService = CreateObject(\"java\", \"coldfusion.server.ServiceFactory\").DataSourceService /&gt;\n    &lt;cfset var sDatasources = dsService.getDatasources() /&gt;\n    &lt;cfset var dsList = StructKeyList(sDatasources, arguments.delimiter) /&gt;\n    &lt;cfreturn ListSort(dsList, arguments.sort_type, arguments.sort_order, arguments.delimiter) /&gt;\n&lt;/cffunction&gt;\n</code></pre>\n<h3 id=\"testing-all-3-methods\">Testing all 3 methods:</h3>\n<p>Here's a small script to test all the functions from this post.\nFor this to work correctly, you'll need to set the correct CFIDE password.</p>\n<pre><code class=\"hljs language-cfm\">&lt;cfset my_cfide_password = \"admin\" /&gt;\n&lt;cfset my_datasource_list = getDatasourceList() /&gt;\n\n&lt;cfoutput&gt;\n    #verifyDsnList1(my_datasource_list)#\n    &lt;br /&gt;\n    #verifyDsnList2(my_datasource_list)#\n    &lt;br /&gt;\n    #verifyDsnList3(my_cfide_password, my_datasource_list)#\n    &lt;br /&gt;\n&lt;/cfoutput&gt;\n</code></pre>\n","frontmatter":{"layout":"post","title":"Verify All ColdFusion DataSources","categories":["ColdFusion"],"tags":["adminapi","ColdFusion","datasources"]}},"previousTitle":"ESX Wave Organizer FAQ","previousUrl":"/2009/12/esx-wave-organizer-faq","nextTitle":"Open Electribe Editor - v1.0.0.Beta Released","nextUrl":"/2010/03/open-electribe-editor-v1-0-0-beta-released"},"__N_SSG":true}