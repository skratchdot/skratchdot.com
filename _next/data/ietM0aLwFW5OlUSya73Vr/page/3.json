{"pageProps":{"posts":[{"year":"2012","month":"05","day":"30","slug":"prevent-console-calls-from-throwing-errors","filename":"2012-05-30-prevent-console-calls-from-throwing-errors.md","html":"<p>If you try to use <strong>window.console</strong> calls in older browsers, an error will be thrown.</p>\n<p>There are a few ways to get around this. One way is to use a\n<a href=\"http://www.calormen.com/polyfill/#console\">console polyfill</a>. Another way is to\nuse a <a href=\"http://benalman.com/projects/javascript-debug-console-log/\">console wrapper</a>.\nYet one additional way is by creating empty functions for all the available\n<strong>window.console</strong> calls.</p>\n<p>This blog post provides some code to achieve the third method listed above. The code\nfirst ensures that <strong>window.console</strong> exists. It then ensures that all functions in\nthe <a href=\"http://getfirebug.com/wiki/index.php/Console_API\">Firebug Console API</a>\nexist in the <strong>window.console</strong> object. We default to an empty function so older browsers\ndon't throw errors. If a given <strong>window.console</strong> function already exists, we will use the\ndefault browser behavior.</p>\n<h3 id=\"un-minified-version\">Un-Minified Version:</h3>\n<!-- prettier-ignore-start -->\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/*jslint browser: true, plusplus: true */</span>\n(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"><span class=\"hljs-variable language_\">window</span></span>) {\n    <span class=\"hljs-string\">'use strict'</span>;\n\n    <span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>,\n        emptyFunction = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {},\n        functionNames = [\n            <span class=\"hljs-string\">'assert'</span>, <span class=\"hljs-string\">'clear'</span>, <span class=\"hljs-string\">'count'</span>, <span class=\"hljs-string\">'debug'</span>, <span class=\"hljs-string\">'dir'</span>,\n            <span class=\"hljs-string\">'dirxml'</span>, <span class=\"hljs-string\">'error'</span>, <span class=\"hljs-string\">'exception'</span>, <span class=\"hljs-string\">'group'</span>, <span class=\"hljs-string\">'groupCollapsed'</span>,\n            <span class=\"hljs-string\">'groupEnd'</span>, <span class=\"hljs-string\">'info'</span>, <span class=\"hljs-string\">'log'</span>, <span class=\"hljs-string\">'profile'</span>, <span class=\"hljs-string\">'profileEnd'</span>, <span class=\"hljs-string\">'table'</span>,\n            <span class=\"hljs-string\">'time'</span>, <span class=\"hljs-string\">'timeEnd'</span>, <span class=\"hljs-string\">'timeStamp'</span>, <span class=\"hljs-string\">'trace'</span>, <span class=\"hljs-string\">'warn'</span>\n        ];\n\n    <span class=\"hljs-comment\">// Make sure window.console exists</span>\n    <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">console</span> = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">console</span> || {};\n\n    <span class=\"hljs-comment\">// Make sure all functions exist</span>\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; functionNames.<span class=\"hljs-property\">length</span>; i++) {\n        <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">console</span>[functionNames[i]] = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">console</span>[functionNames[i]] || emptyFunction;\n    }\n\n}(<span class=\"hljs-variable language_\">window</span>));\n</code></pre>\n<!-- prettier-ignore-end -->\n\n<h3 id=\"minified-version\">Minified Version:</h3>\n<!-- prettier-ignore-start -->\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/* https://www.skratchdot.com/2012/05/prevent-console-calls-from-throwing-errors/ */</span>\n(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">b</span>){<span class=\"hljs-keyword\">var</span> a=<span class=\"hljs-number\">0</span>,c=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>){},d=[<span class=\"hljs-string\">\"assert\"</span>,<span class=\"hljs-string\">\"clear\"</span>,<span class=\"hljs-string\">\"count\"</span>,<span class=\"hljs-string\">\"debug\"</span>,<span class=\"hljs-string\">\"dir\"</span>,<span class=\"hljs-string\">\"dirxml\"</span>,<span class=\"hljs-string\">\"error\"</span>,<span class=\"hljs-string\">\"exception\"</span>,<span class=\"hljs-string\">\"group\"</span>,<span class=\"hljs-string\">\"groupCollapsed\"</span>,<span class=\"hljs-string\">\"groupEnd\"</span>,<span class=\"hljs-string\">\"info\"</span>,<span class=\"hljs-string\">\"log\"</span>,<span class=\"hljs-string\">\"profile\"</span>,<span class=\"hljs-string\">\"profileEnd\"</span>,<span class=\"hljs-string\">\"table\"</span>,<span class=\"hljs-string\">\"time\"</span>,<span class=\"hljs-string\">\"timeEnd\"</span>,<span class=\"hljs-string\">\"timeStamp\"</span>,<span class=\"hljs-string\">\"trace\"</span>,<span class=\"hljs-string\">\"warn\"</span>];b.<span class=\"hljs-property\">console</span>=b.<span class=\"hljs-property\">console</span>||{};<span class=\"hljs-keyword\">for</span>(a=<span class=\"hljs-number\">0</span>;a&lt;d.<span class=\"hljs-property\">length</span>;a++){b.<span class=\"hljs-property\">console</span>[d[a]]=b.<span class=\"hljs-property\">console</span>[d[a]]||c}}(<span class=\"hljs-variable language_\">window</span>));\n</code></pre>\n<!-- prettier-ignore-end -->\n","frontmatter":{"layout":"post","title":"Prevent console calls from throwing errors","categories":["Javascript"],"tags":["Javascript","console"]}},{"year":"2012","month":"05","day":"29","slug":"ubuntu-dual-boot-change-default-os","filename":"2012-05-29-ubuntu-dual-boot-change-default-os.md","html":"<p>On one of my laptops, I'm dual booting Windows 7 and Ubuntu 12.04 with Grub2 as the bootloader.</p>\n<p>I always forget what steps to take to \"remember my last OS\" when booting.</p>\n<p>First, you need to modify <strong>/etc/default/grub</strong>:</p>\n<pre><code class=\"hljs language-bash\">sudo vi /etc/default/grub\n</code></pre>\n<p>By adding the following 2 lines:</p>\n<pre><code class=\"hljs language-text\">  GRUB_DEFAULT=saved\n  GRUB_SAVEDEFAULT=true\n</code></pre>\n<p>After modifying this file, you need to update GRUB's configuration by executing the following 2 commands:</p>\n<pre><code class=\"hljs language-bash\">sudo grub-mkconfig\nsudo update-grub\n</code></pre>\n<h3 id=\"links\">Links</h3>\n<p>See the <a href=\"https://help.ubuntu.com/community/Grub2#Saved\">Ubuntu Grub2 Help Page</a>\nor this <a href=\"http://superuser.com/questions/95828/making-default-saved-work-with-grub2/205360#205360\">Stack Overflow Answer</a></p>\n","frontmatter":{"layout":"post","title":"Ubuntu Dual Boot - Change Default OS","categories":["Ubuntu"],"tags":["Windows","Ubuntu","Dual Boot","Grub","Grub2"]}},{"year":"2012","month":"05","day":"28","slug":"css3-zoopraxiscope","filename":"2012-05-28-css3-zoopraxiscope.md","html":"<p>I was going through some old files on my laptop, and found this snippet of code I created back in\nApril. On April 9th, there was a google doodle for\n<a href=\"http://www.google.com/doodles/eadweard-j-muybridges-182nd-birthday\">Eadweard J. Muybridge's 182nd Birthday</a>.</p>\n<p>I saw a post on <a href=\"http://news.ycombinator.com/item?id=3816692\">HackerNews</a>\nin which someone created a pure CSS version of the google doodle.</p>\n<p>I created a <a href=\"http://jsfiddle.net/F5Uf5/\">JSFiddle</a> snippet that day, but never posted it anywhere.</p>\n<p>Anyways, I've cleaned the example up a bit, and posted it below. It now contains pure CSS3 controls\nto turn the demo on/off or change the speed of the animation.</p>\n<h2 id=\"demo\">Demo</h2>\n<style type=\"text/css\">\n    img#zoopraxiscope {\n        width:230px;\n        height:230px;        \n    }\n    @-webkit-keyframes spin {\n        from { -webkit-transform: rotate(0deg); }\n        to { -webkit-transform: rotate(-360deg); }\n    }\n    @-moz-keyframes spin {\n        from { -moz-transform: rotate(0deg); }\n        to { -moz-transform: rotate(-360deg); }\n    }\n    @-ms-keyframes spin {\n        from { -ms-transform: rotate(0deg); }\n        to { -ms-transform: rotate(-360deg); }\n    }\n    a#animation-on:target~input[value=fast]:checked~img#zoopraxiscope {\n        -webkit-animation: spin 230ms infinite linear; \n        -moz-animation: spin 230ms infinite linear; \n        -ms-animation: spin 230ms infinite linear; \n    }\n    a#animation-on:target~input[value=medium]:checked~img#zoopraxiscope {\n        -webkit-animation: spin 920ms infinite linear; \n        -moz-animation: spin 920ms infinite linear; \n        -ms-animation: spin 920ms infinite linear; \n    }\n    a#animation-on:target~input[value=slow]:checked~img#zoopraxiscope {\n        -webkit-animation: spin 2000ms infinite linear; \n        -moz-animation: spin 2000ms infinite linear; \n        -ms-animation: spin 2000ms infinite linear; \n    }\n</style>\n\n<form style=\"text-align:center\">\n    <h3>Turn Animation</h3>\n    <a id=\"animation-off\" href=\"#animation-off\">Off</a>\n    <a id=\"animation-on\" href=\"#animation-on\">On</a>\n    <br>\n    <h3>Speed:</h3>\n    <label for=\"fast\">Fast:</label>\n    <input type=\"radio\" name=\"speed\" id=\"fast\" value=\"fast\" checked=\"checked\">\n    <br>\n    <label for=\"medium\">Medium:</label>\n    <input type=\"radio\" name=\"speed\" id=\"medium\" value=\"medium\">\n    <br>\n    <label for=\"slow\">Slow:</label>\n    <input type=\"radio\" name=\"speed\" id=\"slow\" value=\"slow\">\n    <div style=\"height:50px\">&nbsp;</div>\n    <img id=\"zoopraxiscope\" src=\"/images/posts/2012/05/28/zoopraxiscope.jpg\">\n</form>\n\n<h2 id=\"css\">CSS:</h2>\n<pre><code class=\"hljs language-css\">&lt;style type=\"text/css\"&gt;\n    <span class=\"hljs-selector-tag\">img</span><span class=\"hljs-selector-id\">#zoopraxiscope</span> {\n        <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">230px</span>;\n        <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">230px</span>;\n    }\n    <span class=\"hljs-keyword\">@-webkit-keyframes</span> spin {\n        <span class=\"hljs-selector-tag\">from</span> { -webkit-<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(<span class=\"hljs-number\">0deg</span>); }\n        <span class=\"hljs-selector-tag\">to</span> { -webkit-<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(-<span class=\"hljs-number\">360deg</span>); }\n    }\n    <span class=\"hljs-keyword\">@-moz-keyframes</span> spin {\n        <span class=\"hljs-selector-tag\">from</span> { -moz-<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(<span class=\"hljs-number\">0deg</span>); }\n        <span class=\"hljs-selector-tag\">to</span> { -moz-<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(-<span class=\"hljs-number\">360deg</span>); }\n    }\n    <span class=\"hljs-keyword\">@-ms-keyframes</span> spin {\n        <span class=\"hljs-selector-tag\">from</span> { -ms-<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(<span class=\"hljs-number\">0deg</span>); }\n        <span class=\"hljs-selector-tag\">to</span> { -ms-<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(-<span class=\"hljs-number\">360deg</span>); }\n    }\n    <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-id\">#animation-on</span><span class=\"hljs-selector-pseudo\">:target</span>~<span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-attr\">[value=fast]</span><span class=\"hljs-selector-pseudo\">:checked</span>~<span class=\"hljs-selector-tag\">img</span><span class=\"hljs-selector-id\">#zoopraxiscope</span> {\n        -webkit-<span class=\"hljs-attribute\">animation</span>: spin <span class=\"hljs-number\">230ms</span> infinite linear;\n        -moz-<span class=\"hljs-attribute\">animation</span>: spin <span class=\"hljs-number\">230ms</span> infinite linear;\n        -ms-<span class=\"hljs-attribute\">animation</span>: spin <span class=\"hljs-number\">230ms</span> infinite linear;\n    }\n    <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-id\">#animation-on</span><span class=\"hljs-selector-pseudo\">:target</span>~<span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-attr\">[value=medium]</span><span class=\"hljs-selector-pseudo\">:checked</span>~<span class=\"hljs-selector-tag\">img</span><span class=\"hljs-selector-id\">#zoopraxiscope</span> {\n        -webkit-<span class=\"hljs-attribute\">animation</span>: spin <span class=\"hljs-number\">920ms</span> infinite linear;\n        -moz-<span class=\"hljs-attribute\">animation</span>: spin <span class=\"hljs-number\">920ms</span> infinite linear;\n        -ms-<span class=\"hljs-attribute\">animation</span>: spin <span class=\"hljs-number\">920ms</span> infinite linear;\n    }\n    <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-id\">#animation-on</span><span class=\"hljs-selector-pseudo\">:target</span>~<span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-attr\">[value=slow]</span><span class=\"hljs-selector-pseudo\">:checked</span>~<span class=\"hljs-selector-tag\">img</span><span class=\"hljs-selector-id\">#zoopraxiscope</span> {\n        -webkit-<span class=\"hljs-attribute\">animation</span>: spin <span class=\"hljs-number\">2000ms</span> infinite linear;\n        -moz-<span class=\"hljs-attribute\">animation</span>: spin <span class=\"hljs-number\">2000ms</span> infinite linear;\n        -ms-<span class=\"hljs-attribute\">animation</span>: spin <span class=\"hljs-number\">2000ms</span> infinite linear;\n    }\n&lt;/style&gt;\n</code></pre>\n<h2 id=\"html\">HTML:</h2>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"text-align:center\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>Turn Animation<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"animation-off\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#animation-off\"</span>&gt;</span>Off<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"animation-on\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#animation-on\"</span>&gt;</span>On<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>Speed:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"fast\"</span>&gt;</span>Fast:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"radio\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"speed\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"fast\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"fast\"</span> <span class=\"hljs-attr\">checked</span>=<span class=\"hljs-string\">\"checked\"</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"medium\"</span>&gt;</span>Medium:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"radio\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"speed\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"medium\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"medium\"</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"slow\"</span>&gt;</span>Slow:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"radio\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"speed\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"slow\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"slow\"</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"height:50px\"</span>&gt;</span><span class=\"hljs-symbol\">&amp;nbsp;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"zoopraxiscope\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"/images/posts/2012/05/28/zoopraxiscope.jpg\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n</code></pre>\n<h2 id=\"links\">Links</h2>\n<p>Inspired by the <a href=\"http://www.google.com/doodles/eadweard-j-muybridges-182nd-birthday\">Google Doodle</a>\non April 9th, 2012 celebrating Eadweard J. Muybridge</p>\n<p><em>See:</em></p>\n<ul>\n<li><p><a href=\"http://news.ycombinator.com/item?id=3816692\">http://news.ycombinator.com/item?id=3816692</a></p>\n</li>\n<li><p><a href=\"http://en.wikipedia.org/wiki/Zoopraxiscope\">http://en.wikipedia.org/wiki/Zoopraxiscope</a></p>\n</li>\n<li><p><a href=\"http://davidwalsh.name/css-spin-revisited\">http://davidwalsh.name/css-spin-revisited</a></p>\n</li>\n<li><p><a href=\"http://www.tangledindesign.com/blog/how-to-trigger-css3-transitions-on-click-using-target/\">http://www.tangledindesign.com/blog/how-to-trigger-css3-transitions-on-click-using-target/</a></p>\n</li>\n</ul>\n<p><em>See also:</em></p>\n<ul>\n<li><a href=\"http://jsfiddle.net/F5Uf5/\">http://jsfiddle.net/F5Uf5/</a></li>\n</ul>\n","frontmatter":{"layout":"post","title":"CSS3 Zoopraxiscope","categories":["CSS3"],"tags":["CSS3","Zoopraxiscope","CSS Transforms","CSS Animations"]}},{"year":"2012","month":"05","day":"15","slug":"windows-is-slow-after-adding-more-memory","filename":"2012-05-15-windows-is-slow-after-adding-more-memory.md","html":"<p>I dual boot my <a href=\"http://www.dell.com/us/business/p/precision-m6500/pd\">Dell Precision m6500</a> with\nWindows 7 and Ubuntu 12.04. I recently upgraded the memory from 8gb (4x2gb) to 32gb (4x8gb). Ridiculous\nI know. This is my work laptop and the extra RAM is useful.</p>\n<p>Anyways, after replacing the RAM, Windows slowed down dramatically. The startup screen was\ntaking over 10 minutes to load. I tried disabling the\n<a href=\"http://windows.microsoft.com/en-us/windows7/Change-the-size-of-virtual-memory\">page file (and virtual memory)</a>,\nthen rebooted. Windows was still taking forever to start.</p>\n<p>Once it finally loaded, everything was super slow. The CPU wasn't really spiking, and the disk\nusage didn't look crazy, but any action took forever. Even the mouse cursor was slow and jumpy.</p>\n<p>When I would boot into Ubuntu, things were fine. I couldn't figure out what was wrong with Windows.</p>\n<p>I tried running <a href=\"http://www.memtest.org/\">Memtest</a>, and the tests were passing.</p>\n<p>Finally, someone suggested trying to update the BIOS. That turned out to be the smoking gun. I upgraded\nthe BIOS from A04 to A08, and rebooted Windows. Everything started working at full speed again. I'm\nnot sure if it was the upgrade, or the simply resetting/flashing the BIOS, but things started working.</p>\n","frontmatter":{"layout":"post","title":"Windows is slow after adding more memory","categories":["Windows 7","Ubuntu"],"tags":["Windows","Ubuntu","Dual Boot","RAM","Memory","Upgrade","BIOS","Dell","Memtest"]}},{"year":"2012","month":"05","day":"12","slug":"markdown-not-working-in-jekyll","filename":"2012-05-12-markdown-not-working-in-jekyll.md","html":"<p>I just converted my blog from <a href=\"http://wordpress.org/\">Wordpress</a> to <a href=\"https://github.com/mojombo/jekyll/\">Jekyll</a>.\nThe process was fairly straightforward, although it took a lot of reading, and viewing other people's\nexample <a href=\"https://github.com/mojombo/jekyll/wiki/sites\">sites</a>.</p>\n<p>One issue that took a while for me to figure out, was a small typo.</p>\n<p>In <strong>_layouts/post.html</strong>, I was using the following syntax to include my post content:</p>\n<pre><code class=\"hljs language-plaintext\">{% raw %}{{ page.content }}{% endraw %}\n</code></pre>\n<p>As I was converting my posts to use markdown syntax, the posts weren't \"markifying\". It turns out, all I needed to do was use this syntax:</p>\n<pre><code class=\"hljs language-plaintext\">{% raw %}{{ content }}{% endraw %}\n</code></pre>\n","frontmatter":{"layout":"post","title":"Markdown not working in Jekyll","categories":["Jekyll"],"tags":["Jekyll","Wordpress","Blog","Markdown"]}},{"year":"2012","month":"04","day":"30","slug":"mongodb-shell-extensions","filename":"2012-04-30-mongodb-shell-extensions.md","html":"<p>Last Friday I read the blog post <a href=\"http://blog.mongodb.org/post/21923016898/meet-variety-a-schema-analyzer-for-mongodb\">Meet Variety, a Schema Analyzer for MongoDB</a>.</p>\n<p>I tried <a href=\"https://github.com/JamesCropcho/variety/\">Variety</a> out, but it didn't quite do what I wanted, and it also created a few DBs/Collections on my server that I didn't expect.</p>\n<p>Over the weekend, I decided to write my own implementation called: <a href=\"/projects/mongodb-schema\">mongodb-schema</a>. After finishing that script, I created a few more shell extensions.</p>\n<p>Please note, these are just quick examples I whipped up, and are not really meant to be run on large collections (unless you use \"limit\", or are willing to wait a really long time). They are definitely not \"production ready\".</p>\n<p>Here are the scripts:</p>\n<ul>\n<li><p><a href=\"/projects/mongodb-distinct-types\">mongodb-distinct-types</a> - Similar to the db.myCollection.distinct() function, distinctTypes() will return \"types\" rather than \"values\".</p>\n</li>\n<li><p><a href=\"/projects/mongodb-flatten\">mongodb-flatten</a> - The flatten() function is a mapReduce that flattens documents into key/value pairs.</p>\n</li>\n<li><p><a href=\"/projects/mongodb-schema\">mongodb-schema</a> - A schema analysis tool for MongoDB.</p>\n</li>\n<li><p><a href=\"/projects/mongodb-wild\">mongodb-wild</a> - Adds a wildcard search to the mongodb shell.</p>\n</li>\n</ul>\n","frontmatter":{"layout":"post","title":"MongoDB - Shell Extensions","categories":["MongoDB","Shell"],"tags":["MongoDB","Shell","Shell Extensions","Projects","Update"]}},{"year":"2011","month":"09","day":"10","slug":"open-electribe-editor-v1-0-3-released","filename":"2011-09-10-open-electribe-editor-v1-0-3-released.md","html":"<h3 id=\"v103---released-september-10-2011\">v1.0.3 - Released September 10, 2011</h3>\n<ul>\n<li><p>[<a href=\"https://github.com/skratchdot/open-electribe-editor/issues/3\">FEATURE REQUEST: #3</a>] Added the ability to import patterns from other .esx files</p>\n</li>\n<li><p>[<a href=\"https://github.com/skratchdot/open-electribe-editor/issues/13\">TODO: #13</a>] Added \"reset perspective\" functionality</p>\n</li>\n<li><p>[<a href=\"https://github.com/skratchdot/open-electribe-editor/issues/14\">TODO: #14</a>] Fixed unclear message when dragging audio files</p>\n</li>\n<li><p>[<a href=\"https://github.com/skratchdot/open-electribe-editor/issues/10\">BUG: #10</a>] Fixed rounding issue when setting SampleTune</p>\n</li>\n</ul>\n<p>Download here: <a href=\"http://code.google.com/p/open-electribe-editor/downloads/list\">http://code.google.com/p/open-electribe-editor/downloads/list</a></p>\n","frontmatter":{"layout":"post","title":"Open Electribe Editor - v1.0.3 Released","published":true,"categories":["Electribe"],"tags":["Electribe","ESX-1","Korg","Projects","Update"]}},{"year":"2011","month":"07","day":"25","slug":"domformat-v1-0-released-july-25-2011","filename":"2011-07-25-domformat-v1-0-released-july-25-2011.md","html":"<p>domFormat is a simple javascript library to get DOM nodes as formatted/pretty strings.</p>\n<p>You can find the source code here:</p>\n<p><a href=\"https://github.com/skratchdot/domFormat\">https://github.com/skratchdot/domFormat</a></p>\n<p>And some examples here:</p>\n<p><a href=\"http://projects.skratchdot.com/domFormat/examples/index-html5.html\">http://projects.skratchdot.com/domFormat/examples/index-html5.html</a></p>\n<p>Here are 2 bookmarklets:</p>\n<ul>\n<li><p><a href=\"javascript:%28function%28%29%7Bvar%20doc%3Ddocument.cloneNode%28true%29%7C%7Cdocument%3Bvar%20script%3Ddocument.createElement%28'script'%29%3Bscript.setAttribute%28'src'%2C'http%3A%2F%2Fprojects.skratchdot.com%2FdomFormat%2FdomFormat.min.js'%29%3Bscript.addEventListener%28'load'%2Cfunction%28%29%7Bvar%20domString%3DdomFormat.getString%28doc%29%3Bdocument.write%28'%3Ctextarea%20wrap%3D%22off%22%20id%3D%22showSource%22%20style%3D%22width%3A100%25%3Bheight%3A100%25%3Bborder%3A0%3Bmargin%3A0%3Bpadding%3A0%3Bwhitespace%3Anowrap%3B%22%3E%3C%2Ftextarea%3E'%29%3Bdocument.getElementById%28'showSource'%29.value%3DdomString%3Bdocument.close%28%29%3B%7D%2Cfalse%29%3Bdocument.body.appendChild%28script%29%3B%7D%28%29%29;\">-- Show Source --</a></p>\n</li>\n<li><p><a href=\"javascript:%28function%28%29%7Bvar%20doc%3Ddocument.cloneNode%28true%29%7C%7Cdocument%3Bvar%20script%3Ddocument.createElement%28'script'%29%3Bscript.setAttribute%28'src'%2C'http%3A%2F%2Fprojects.skratchdot.com%2FdomFormat%2FdomFormat.min.js'%29%3Bscript.addEventListener%28'load'%2Cfunction%28%29%7Bvar%20domString%3DdomFormat.getString%28doc%29%3Bdocument.write%28domString%29%3Bdocument.close%28%29%3B%7D%2Cfalse%29%3Bdocument.body.appendChild%28script%29%3B%7D%28%29%29;\">-- Reload Page With Formatted Source --</a></p>\n</li>\n</ul>\n","frontmatter":{"layout":"post","title":"domFormat - v1.0 (Released July 25, 2011)","categories":["Javascript","Bookmarklet"],"tags":["Bookmarklet","DOM","Javascript","Projects"]}},{"year":"2011","month":"06","day":"05","slug":"git-diff-build-script-aka-read-your-git-docs","filename":"2011-06-05-git-diff-build-script-aka-read-your-git-docs.md","html":"<p>When working in SVN, I have a batch script I've used in the past to create \"DEPLOY\" and \"RESTORE\" folders off of diffs between branches. The script will create a \"DEPLOY\" folder containing all <b>added</b> and <b>modified</b> files, and a \"RESTORE\" folder containing all <b>modified</b> files.</p>\n<p>The purpose of this, is to deploy a set of files to a different environment. I can just copy the \"DEPLOY\" folder to any number of servers. If there is a bug that made it through QA, and we need to immediately rollback changes, we can just copy the \"RESTORE\" folder to all the same servers.</p>\n<p>I just wrote a similar script for Git: <a href=\"https://github.com/skratchdot/Git-Diff-Build-Script\">Git-Diff-Build-Script</a></p>\n<p>While writing that script, I didn't read the Git docs closely enough, and missed the \"git diff\" <b>--diff-filter</b> parameter. Because of this, I thought I would have to use AWK to sanitize my list of files, but then I read about the <b>--diff-filter</b> parameter, and changed 2 lines of code to 1:</p>\n<p><u>USING AWK:</u></p>\n<pre><code class=\"hljs language-bash\">info=<span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(git diff origin/prod origin/dev --name-status)</span>\"</span>\nfiles=<span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(echo <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$info</span>\"</span> | awk '$1 ~/M|A/ {print $2}')</span>\"</span>\n</code></pre>\n<p><u>USING diff-filter:</u></p>\n<pre><code class=\"hljs language-bash\">files=<span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(git diff origin/prod origin/dev --name-only --diff-filter=MA)</span>\"</span>\n</code></pre>\n","frontmatter":{"layout":"post","title":"Git Diff Build Script (AKA read your Git docs)","categories":["Git","Bash","Shell"],"tags":["Ant","AWK","Bash","Shell","Git","SVN"]}},{"year":"2011","month":"05","day":"17","slug":"serializejson-in-coldfusion-with-unicode-characters","filename":"2011-05-17-serializejson-in-coldfusion-with-unicode-characters.md","html":"<p>This weekend I read an interesting blog post called <a href=\"http://timelessrepo.com/json-isnt-a-javascript-subset\">JSON: The JavaScript subset that isn't</a>\nand decided to test ColdFusion's SerializeJSON() function to see if the \"bug\" existed there.\nIt does. To reproduce, you can create a .cfm page that contains the following HTML/CF code:</p>\n<pre><code class=\"hljs language-cfm\">&lt;script type=\"text/javascript\"&gt;\n    var test = #SerializeJSON(\"test\" &amp; chr(8232))#;\n&lt;/script&gt;\n</code></pre>\n<p>To \"fix\" the bug, you can replace SerializeJSON() with SafeSerializeJSON() like this:</p>\n<pre><code class=\"hljs language-cfm\">&lt;script type=\"text/javascript\"&gt;\n    var test = #SafeSerializeJSON(\"test\" &amp; chr(8232))#;\n&lt;/script&gt;\n</code></pre>\n<p>The SafeSerializeJSON() function looks like this:</p>\n<pre><code class=\"hljs language-cfm\">&lt;cffunction name=\"SafeSerializeJSON\" output=\"false\" access=\"private\" returntype=\"string\"&gt;\n    &lt;cfargument name=\"obj\" type=\"any\" required=\"true\" /&gt;\n    &lt;cfargument name=\"serializeQueryByColumns\" type=\"boolean\" required=\"false\" default=\"false\" /&gt;\n    &lt;cfset var jsonOutput = SerializeJSON(arguments.obj, arguments.serializeQueryByColumns) /&gt;\n    &lt;cfset jsonOutput = Replace(jsonOutput, chr(8232), \"\\u2028\", \"all\") /&gt;\n    &lt;cfset jsonOutput = Replace(jsonOutput, chr(8233), \"\\u2029\", \"all\") /&gt;\n    &lt;cfreturn jsonOutput /&gt;\n&lt;/cffunction&gt;\n</code></pre>\n<p>I've created a <a href=\"https://gist.github.com/975802\">gist</a> that explores the issue in slightly more detail:</p>\n<ul>\n<li><a href=\"https://gist.github.com/975802#file_json.cfm\">json.cfm</a></li>\n<li><a href=\"https://gist.github.com/975802#file_json2.cfm\">json2.cfm</a></li>\n</ul>\n","frontmatter":{"layout":"post","title":"SerializeJSON() in ColdFusion with Unicode Characters","categories":["ColdFusion"],"tags":["ColdFusion","Javascript"]}}],"previousTitle":"Older","previousUrl":"/page/4","nextTitle":"Newer","nextUrl":"/page/2"},"__N_SSG":true}