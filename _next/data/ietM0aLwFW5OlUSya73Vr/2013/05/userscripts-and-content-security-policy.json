{"pageProps":{"post":{"year":"2013","month":"05","day":"19","slug":"userscripts-and-content-security-policy","filename":"2013-05-19-userscripts-and-content-security-policy.md","html":"<p>Last month, Github started to include some\n<a href=\"https://en.wikipedia.org/wiki/Content_Security_Policy\">Content Security Policy Headers</a>.</p>\n<p>They wrote a <a href=\"https://github.com/blog/1477-content-security-policy\">blog post</a> describing\nthe problems CSP headers try to solve, how to prepare your app for including the headers,\nand listed some of the current limitations you may encounter when using the headers.</p>\n<p>I've ran into some of these limitations with the Github userscripts I've authored.</p>\n<p>First off, to make a cross browser userscript, there are a few problems that I've ran into.\nIf your userscript needs to access variables on a page, you can use a few techniques:</p>\n<ul>\n<li><a href=\"http://wiki.greasespot.net/UnsafeWindow\">Unsafe Window</a></li>\n<li><a href=\"http://wiki.greasespot.net/Location_hack\">Location Hack</a></li>\n<li><a href=\"http://wiki.greasespot.net/Content_Script_Injection\">Content Script Injection</a></li>\n</ul>\n<p>Of these three, <strong>Content Script Injection</strong> is the preferred method. It works for both\nFirefox and Chrome. I've been using a variation of that method for most of the scripts I've\nwritten in the past.</p>\n<p>Here's how I would typically write my scripts:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Create some js that you want to inject into the page</span>\n<span class=\"hljs-keyword\">var</span> main = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {};\n\n<span class=\"hljs-comment\">// Inject our main script into the page</span>\n<span class=\"hljs-keyword\">var</span> script = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">'script'</span>);\nscript.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">'('</span> + main.<span class=\"hljs-title function_\">toString</span>() + <span class=\"hljs-string\">')();'</span>;\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">appendChild</span>(script);\n</code></pre>\n<p>After Github started sending CSP headers, my userscripts broke by throwing errors like:</p>\n<pre><code class=\"hljs language-plaintext\">CSP ERROR:  Couldn't parse invalid source 'unsafe-inline'\n</code></pre>\n<p>To fix Firefox, I temporarily removed the <strong>Content Script Injection</strong> hacks I was using. Here's\nan example commit I made back in April:</p>\n<p><a href=\"https://github.com/skratchdot/github-repo-counts.user.js/commit/80f77bc3d588ef5fcd411a3dc77062166b091713\">https://github.com/skratchdot/github-repo-counts.user.js/commit/80f77bc3d588ef5fcd411a3dc77062166b091713</a></p>\n<p>What I forgot when making those commits, is that Chrome userscripts do not work the same way as\nFirefox userscripts.</p>\n<p>To make Chrome userscripts work, I <em>needed</em> to use <strong>Content Script Injection</strong>. The issue is that\nGithub is sending the following CSP headers:</p>\n<pre><code class=\"hljs language-plaintext\">x-content-security-policy: default-src *; script-src https://github.com https://a248.e.akamai.net https://jobs.github.com https://ssl.google-analytics.com https://secure.gaug.es https://collector.githubapp.com https://gist.github.com; style-src https://github.com https://a248.e.akamai.net 'unsafe-inline'; object-src https://github.com https://a248.e.akamai.net\n</code></pre>\n<p>If you notice, I can only use the <strong>Content Script Injection</strong> method from the following domains:</p>\n<ul>\n<li><a href=\"https://github.com\">https://github.com</a></li>\n<li><a href=\"https://a248.e.akamai.net\">https://a248.e.akamai.net</a></li>\n<li><a href=\"https://jobs.github.com\">https://jobs.github.com</a></li>\n<li><a href=\"https://ssl.google-analytics.com\">https://ssl.google-analytics.com</a></li>\n<li><a href=\"https://secure.gaug.es\">https://secure.gaug.es</a></li>\n<li><a href=\"https://collector.githubapp.com\">https://collector.githubapp.com</a></li>\n<li><a href=\"https://gist.github.com\">https://gist.github.com</a></li>\n</ul>\n<p>I had been hotlinking my scripts from the raw.github.com domain.</p>\n<p>To fix, I started hosting my scripts in a <a href=\"https://gist.github.com/skratchdot/5604120\">Gist</a>.</p>\n<p>Since Firefox supports the @require userscript annotation, I rely on that. For Chrome, I am using\n<strong>Content Script Injection</strong>. The reason I didn't use <strong>Content Script Injection</strong> for Firefox, is\nbecause @require does some caching, and I was also experiencing some weird behavior in Firefox in\nwhich certain requests to <a href=\"https://gist.github.com/\">gist.github.com</a> were returning no content\n(0 byte requests)- and my scripts weren't working.</p>\n<p>I haven't experienced that behavior with Chrome requests.</p>\n<p>Another method I was toying with, is by injecting the scripts via an iframe. Go to any\n<a href=\"https://github.com/\">github.com</a> page, and run the following code in Chrome's console:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> injectViaScript = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fn</span>) {\n  <span class=\"hljs-keyword\">var</span> script = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">'script'</span>);\n  script.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">'('</span> + fn.<span class=\"hljs-title function_\">toString</span>() + <span class=\"hljs-string\">'());'</span>;\n  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">appendChild</span>(script);\n  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">removeChild</span>(script);\n};\n\n<span class=\"hljs-keyword\">var</span> injectViaIframe = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fn</span>) {\n  <span class=\"hljs-keyword\">var</span> fnName = <span class=\"hljs-string\">'dynamic_fn_'</span> + <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">getTime</span>(),\n    iframe = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">'iframe'</span>);\n  iframe.<span class=\"hljs-property\">onload</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    parent.<span class=\"hljs-property\">window</span>[fnName] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Function</span>(<span class=\"hljs-string\">'('</span> + fn.<span class=\"hljs-title function_\">toString</span>() + <span class=\"hljs-string\">'());'</span>);\n    parent.<span class=\"hljs-property\">window</span>[fnName]();\n    parent.<span class=\"hljs-property\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">removeChild</span>(iframe);\n  };\n  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">appendChild</span>(iframe);\n};\n\n<span class=\"hljs-comment\">// This will throw an error</span>\n<span class=\"hljs-title function_\">injectViaScript</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">'Hello from script!'</span>);\n});\n\n<span class=\"hljs-comment\">// This will work</span>\n<span class=\"hljs-title function_\">injectViaIframe</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">'Hello from iframe!'</span>);\n});\n</code></pre>\n<p>That seemed like an approach I could take, but was running into scoping issues, so\ngave up trying. I ended up settling on the @require method for Firefox, and the\n<strong>Content Script Injection</strong> from <a href=\"https://gist.github.com/\">gist.github.com</a> for Chrome.</p>\n","frontmatter":{"layout":"post","title":"Userscripts and Content Security Policy","published":true,"categories":["Userscript","Javascript"],"tags":["Userscript","Javascript","Git","Github","CSP"]}},"previousTitle":"Github Enhancement Suite","previousUrl":"/2013/05/github-enhancement-suite","nextTitle":"Audio Sort - Visualize and Audibilize Sorting Algorithms","nextUrl":"/2013/07/audio-sort-visualize-and-audibilize-sorting-algorithms"},"__N_SSG":true}