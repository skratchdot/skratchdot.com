{"pageProps":{"posts":[{"year":"2016","month":"01","day":"27","slug":"creating-virtual-midi-ports-on-osx","filename":"2016-01-27-creating-virtual-midi-ports-on-osx.md","html":"<h2 id=\"introduction\">Introduction</h2>\n<p><a href=\"http://webaudio.github.io/web-midi-api/\">WebMidi</a> is a technology that has been\nemerging for a few years now, and it's finally supported in Chrome by default.\nEven browsers that don't support it can use the\n<a href=\"https://github.com/cwilso/WebMIDIAPIShim\">WebMIDIAPIShim</a>\nby <a href=\"https://github.com/cwilso/\">Chris Wilson</a> to add support. For a list of\ncurrent support, check out <a href=\"http://caniuse.com/#feat=midi\">caniuse.com</a>.</p>\n<p>If you are not a musician or audio hobbyist, you might not have any midi\ndevices setup, and will not be able to get the full experience on websites that\nare starting to enable midi features.</p>\n<p>Fear not, you can setup virtual midi devices that can be used on these websites.\nThere are ways to do this on all operating systems. This tutorial is focused\non OSX, but Window users can check out tools like\n<a href=\"http://www.midiox.com/myoke.htm\">Midi Yoke</a>,\n<a href=\"http://www.nerds.de/en/loopbe1.html\">LoopBe1</a>,\n<a href=\"http://www.sonycreativesoftware.com/dl/dl.aspx?dwnid=77\">Sony Virtual MIDI Router</a>,\nor <a href=\"http://www.tobias-erichsen.de/software/loopmidi.html\">loopMIDI</a>\nand Linux users can try\n<a href=\"http://www.alsa-project.org/main/index.php/Main_Page\">ALSA</a>\nor <a href=\"http://qjackctl.sourceforge.net/\">QJackCtl</a>.</p>\n<h2 id=\"creating-virtual-midi-ports-on-osx\">Creating Virtual MIDI Ports On OSX</h2>\n<h4 id=\"step-1-open-audio-midi-setup\">Step 1: Open <strong>Audio MIDI Setup</strong></h4>\n<p>You can open <strong>Audio MIDI Setup</strong> by searching Spotlight, by looking in\n<strong>/Applications/Utilities/</strong>, or by using Launchpad:</p>\n<p><img src=\"https://www.skratchdot.com/images/posts/2016/01/27/launchpad.png\" alt=\"Launchpad\"></p>\n<h4 id=\"step-2-show-midi-studio\">Step 2: Show <strong>MIDI Studio</strong></h4>\n<p>Once <strong>Audio MIDI Setup</strong> is open, you can open the <strong>Midi Studio</strong> window:</p>\n<p><img src=\"https://www.skratchdot.com/images/posts/2016/01/27/midi-studio.png\" alt=\"Midi Studio\"></p>\n<h4 id=\"step-3-open-iac-driver\">Step 3: Open <strong>IAC Driver</strong></h4>\n<p>Now you can open <strong>IAC Driver (Inter Application Communications Driver)</strong> by\ndouble clicking on the icon:</p>\n<p><img src=\"https://www.skratchdot.com/images/posts/2016/01/27/iac-driver.png\" alt=\"IAC Driver\"></p>\n<p>Which opens this window:</p>\n<p><img src=\"https://www.skratchdot.com/images/posts/2016/01/27/iac-driver-window.png\" alt=\"IAC Driver Window\"></p>\n<h4 id=\"step-4-add-virtual-port\">Step 4: Add Virtual Port</h4>\n<ul>\n<li>Click the \"Add and Remove Ports Button\"</li>\n<li>A new port called \"IAC Bus 2\" will be added.</li>\n<li>Rename the port to \"WebMidi\" by clicking on the port you want to rename</li>\n<li><strong>IMPORTANT:</strong> Make sure to check the \"Device is online\" box at the top.</li>\n</ul>\n<p>After making the following changes you should see:</p>\n<p><img src=\"https://www.skratchdot.com/images/posts/2016/01/27/iac-driver-finished.png\" alt=\"IAC Driver Finished\"></p>\n<p>Now that you have your virtual driver / port setup, you can install / use a\nvirtual MIDI keyboard on your favorite WebMidi enabled website. For\ninstructions on installing a Virtual MIDI Keyboard, continue reading below.</p>\n<h2 id=\"install--use-a-virtual-midi-keyboard\">Install / Use a Virtual MIDI Keyboard</h2>\n<p>A few options:</p>\n<ul>\n<li><a href=\"http://vmpk.sourceforge.net/\">Virtual MIDI Piano Keyboard</a></li>\n<li><a href=\"http://www.manyetas.com/creed/midikeys.html\">Midi Keys</a></li>\n</ul>\n<p>Since I use <a href=\"http://brew.sh/\">homebrew</a> with <a href=\"http://caskroom.io/\">cask</a>,\nI'm going to install midikeys. You can do this by opening your command line,\nand running:</p>\n<pre><code class=\"hljs language-bash\">brew cask install midikeys\n</code></pre>\n<p><img src=\"https://www.skratchdot.com/images/posts/2016/01/27/midikeys-install.png\" alt=\"MidiKeys - Install\"></p>\n<p>Now that MidiKeys is installed, you can open it via Launchpad:</p>\n<p><img src=\"https://www.skratchdot.com/images/posts/2016/01/27/midikeys-launchpad.png\" alt=\"MidiKeys - Launchpad\"></p>\n<p>Once the program is opened, make sure to choose \"IAC Drive: WebMidi\" from the\n\"Destination\" dropdown:</p>\n<p><img src=\"https://www.skratchdot.com/images/posts/2016/01/27/midikeys-usage.png\" alt=\"MidiKeys - Usage\"></p>\n<p>You can now click on keys from that virtual keyboard to send MIDI events to the\nWebMidi virtual port you created earlier.</p>\n<p>There are other options for virtual keyboards / software, but this is a quick way\nto get up and running. More advanced users can try out programs like\n<a href=\"https://puredata.info/\">Pure Data</a> by running</p>\n<pre><code class=\"hljs language-bash\">brew cask install pd\n</code></pre>\n<p>and creating their own virtual midi keyboard / instrument for usage with WebMidi.</p>\n<p>Better yet, create your own WebMidi instrument that sends output to other\nWebMidi enabled devices!</p>\n","frontmatter":{"layout":"post","title":"Creating Virtual MIDI Ports On OSX for WebMidi","published":true,"categories":["Javascript","MIDI"],"tags":["Javascript","Audio","MIDI","Web","Tutorial"]}},{"year":"2013","month":"08","day":"25","slug":"audio-grid-web-based-audio-tool","filename":"2013-08-25-audio-grid-web-based-audio-tool.md","html":"<p>A few years ago I saw the great <a href=\"http://tonematrix.audiotool.com/\">Tone Matrix</a> tool by\n<a href=\"http://andre-michelle.com/\">Andre Michelle</a>. It's a flash based audio experiment that\nlet's you highlight items in a matrix to create music.</p>\n<p>With newer browsers, you are finally able to implement some of the things you could do in\nflash years ago, without requiring browser plugins. I created\n<a href=\"http://projects.skratchdot.com/audio-grid/index.html\">Audio Grid</a> as an experiment to explore\nthis fact.</p>\n<p>It's using <a href=\"http://mohayonao.github.io/timbre.js/\">timbre.js</a> for it's core functionality, but\nis also making use of a few libraries that I recently created for use in\n<a href=\"/projects/audio-sort/\">Audio Sort</a>:</p>\n<ul>\n<li><p><a href=\"https://github.com/skratchdot/soundfont2mp3\">soundfont2mp3</a> - a command line utility that lets\nyou extract single note mp3s from soundfont files.</p>\n</li>\n<li><p><a href=\"https://github.com/skratchdot/timbre.soundfont.js\">timbre.soundfont.js</a> - play soundfont urls\nusing timbre.js</p>\n</li>\n<li><p><a href=\"https://github.com/skratchdot/timbre.mp3_decode.js\">timbre.mp3_decode.js</a> - a timbre.js plugin\nthat decodes mp3s using jsmad</p>\n</li>\n<li><p><a href=\"https://code.google.com/p/free-midi/\">free-midi</a> - a collection of mp3s generated by\n<a href=\"https://github.com/skratchdot/soundfont2mp3\">soundfont2mp3</a> and the\n<a href=\"http://www.schristiancollins.com/generaluser.php\">S. Christian Collins GeneralUser GS Soundfont</a>.</p>\n</li>\n</ul>\n<p>You can see a demo of <a href=\"\">Audio Grid</a> by clicking on the image below:</p>\n<p><a href=\"http://projects.skratchdot.com/audio-grid/index.html\" class=\"noBackground noBorder\"><img src=\"http://projects.skratchdot.com/audio-grid/img/preview.jpg\" alt=\"Audio Grid\"></a></p>\n","frontmatter":{"layout":"post","title":"Audio Grid - Web-Based Audio Tool","published":true,"categories":["Javascript","AudioGrid"],"tags":["Javascript","Audio","Algorithms","Bootstrap","Projects"]}},{"year":"2013","month":"07","day":"15","slug":"audio-sort-visualize-and-audibilize-sorting-algorithms","filename":"2013-07-15-audio-sort-visualize-and-audibilize-sorting-algorithms.md","html":"<p>A few weeks ago I saw a <a href=\"http://www.youtube.com/watch?v=t8g-iYGHpEA\">video on youtube</a> that\nshowed what different sorting algorithms look (and sound) like as they are executing.</p>\n<p>Since I've been playing with <a href=\"http://mohayonao.github.io/timbre.js/\">timbre.js</a> lately,\nI started to wonder if I could make a web app to accomplish something similar (using javascript\nand <a href=\"https://github.com/skratchdot/audio-sort/#built-with\">modern web libraries</a>).</p>\n<p>I also wanted to attempt to make the audio \"sound good\".</p>\n<p>I came up with something fairly quickly, but then started researching websites that provided\nsimilar functionality. The more I researched, the more features I wanted to add. Check\nthe <a href=\"https://github.com/skratchdot/audio-sort/#see-also--credits\">long list of links</a>\nI researched while working on <a href=\"http://projects.skratchdot.com/audio-sort/index.html\">Audio Sort</a>.</p>\n<p>I plan to <a href=\"https://github.com/skratchdot/audio-sort/blob/gh-pages/TODO.md\">add more features</a>\ndepending on how bored I get. Check out <a href=\"http://projects.skratchdot.com/audio-sort/index.html\">Audio Sort</a>\nbelow:</p>\n<p><a href=\"http://projects.skratchdot.com/audio-sort/index.html\" class=\"noBackground noBorder\"><img src=\"http://projects.skratchdot.com/audio-sort/img/preview.jpg\" alt=\"Audio Sort\"></a></p>\n","frontmatter":{"layout":"post","title":"Audio Sort - Visualize and Audibilize Sorting Algorithms","published":true,"categories":["Javascript","AudioSort"],"tags":["Javascript","Audio","Algorithms","Bootstrap","Projects"]}},{"year":"2013","month":"05","day":"19","slug":"userscripts-and-content-security-policy","filename":"2013-05-19-userscripts-and-content-security-policy.md","html":"<p>Last month, Github started to include some\n<a href=\"https://en.wikipedia.org/wiki/Content_Security_Policy\">Content Security Policy Headers</a>.</p>\n<p>They wrote a <a href=\"https://github.com/blog/1477-content-security-policy\">blog post</a> describing\nthe problems CSP headers try to solve, how to prepare your app for including the headers,\nand listed some of the current limitations you may encounter when using the headers.</p>\n<p>I've ran into some of these limitations with the Github userscripts I've authored.</p>\n<p>First off, to make a cross browser userscript, there are a few problems that I've ran into.\nIf your userscript needs to access variables on a page, you can use a few techniques:</p>\n<ul>\n<li><a href=\"http://wiki.greasespot.net/UnsafeWindow\">Unsafe Window</a></li>\n<li><a href=\"http://wiki.greasespot.net/Location_hack\">Location Hack</a></li>\n<li><a href=\"http://wiki.greasespot.net/Content_Script_Injection\">Content Script Injection</a></li>\n</ul>\n<p>Of these three, <strong>Content Script Injection</strong> is the preferred method. It works for both\nFirefox and Chrome. I've been using a variation of that method for most of the scripts I've\nwritten in the past.</p>\n<p>Here's how I would typically write my scripts:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Create some js that you want to inject into the page</span>\n<span class=\"hljs-keyword\">var</span> main = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {};\n\n<span class=\"hljs-comment\">// Inject our main script into the page</span>\n<span class=\"hljs-keyword\">var</span> script = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">'script'</span>);\nscript.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">'('</span> + main.<span class=\"hljs-title function_\">toString</span>() + <span class=\"hljs-string\">')();'</span>;\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">appendChild</span>(script);\n</code></pre>\n<p>After Github started sending CSP headers, my userscripts broke by throwing errors like:</p>\n<pre><code class=\"hljs language-plaintext\">CSP ERROR:  Couldn't parse invalid source 'unsafe-inline'\n</code></pre>\n<p>To fix Firefox, I temporarily removed the <strong>Content Script Injection</strong> hacks I was using. Here's\nan example commit I made back in April:</p>\n<p><a href=\"https://github.com/skratchdot/github-repo-counts.user.js/commit/80f77bc3d588ef5fcd411a3dc77062166b091713\">https://github.com/skratchdot/github-repo-counts.user.js/commit/80f77bc3d588ef5fcd411a3dc77062166b091713</a></p>\n<p>What I forgot when making those commits, is that Chrome userscripts do not work the same way as\nFirefox userscripts.</p>\n<p>To make Chrome userscripts work, I <em>needed</em> to use <strong>Content Script Injection</strong>. The issue is that\nGithub is sending the following CSP headers:</p>\n<pre><code class=\"hljs language-plaintext\">x-content-security-policy: default-src *; script-src https://github.com https://a248.e.akamai.net https://jobs.github.com https://ssl.google-analytics.com https://secure.gaug.es https://collector.githubapp.com https://gist.github.com; style-src https://github.com https://a248.e.akamai.net 'unsafe-inline'; object-src https://github.com https://a248.e.akamai.net\n</code></pre>\n<p>If you notice, I can only use the <strong>Content Script Injection</strong> method from the following domains:</p>\n<ul>\n<li><a href=\"https://github.com\">https://github.com</a></li>\n<li><a href=\"https://a248.e.akamai.net\">https://a248.e.akamai.net</a></li>\n<li><a href=\"https://jobs.github.com\">https://jobs.github.com</a></li>\n<li><a href=\"https://ssl.google-analytics.com\">https://ssl.google-analytics.com</a></li>\n<li><a href=\"https://secure.gaug.es\">https://secure.gaug.es</a></li>\n<li><a href=\"https://collector.githubapp.com\">https://collector.githubapp.com</a></li>\n<li><a href=\"https://gist.github.com\">https://gist.github.com</a></li>\n</ul>\n<p>I had been hotlinking my scripts from the raw.github.com domain.</p>\n<p>To fix, I started hosting my scripts in a <a href=\"https://gist.github.com/skratchdot/5604120\">Gist</a>.</p>\n<p>Since Firefox supports the @require userscript annotation, I rely on that. For Chrome, I am using\n<strong>Content Script Injection</strong>. The reason I didn't use <strong>Content Script Injection</strong> for Firefox, is\nbecause @require does some caching, and I was also experiencing some weird behavior in Firefox in\nwhich certain requests to <a href=\"https://gist.github.com/\">gist.github.com</a> were returning no content\n(0 byte requests)- and my scripts weren't working.</p>\n<p>I haven't experienced that behavior with Chrome requests.</p>\n<p>Another method I was toying with, is by injecting the scripts via an iframe. Go to any\n<a href=\"https://github.com/\">github.com</a> page, and run the following code in Chrome's console:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> injectViaScript = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fn</span>) {\n  <span class=\"hljs-keyword\">var</span> script = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">'script'</span>);\n  script.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">'('</span> + fn.<span class=\"hljs-title function_\">toString</span>() + <span class=\"hljs-string\">'());'</span>;\n  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">appendChild</span>(script);\n  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">removeChild</span>(script);\n};\n\n<span class=\"hljs-keyword\">var</span> injectViaIframe = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fn</span>) {\n  <span class=\"hljs-keyword\">var</span> fnName = <span class=\"hljs-string\">'dynamic_fn_'</span> + <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">getTime</span>(),\n    iframe = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">'iframe'</span>);\n  iframe.<span class=\"hljs-property\">onload</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    parent.<span class=\"hljs-property\">window</span>[fnName] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Function</span>(<span class=\"hljs-string\">'('</span> + fn.<span class=\"hljs-title function_\">toString</span>() + <span class=\"hljs-string\">'());'</span>);\n    parent.<span class=\"hljs-property\">window</span>[fnName]();\n    parent.<span class=\"hljs-property\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">removeChild</span>(iframe);\n  };\n  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">appendChild</span>(iframe);\n};\n\n<span class=\"hljs-comment\">// This will throw an error</span>\n<span class=\"hljs-title function_\">injectViaScript</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">'Hello from script!'</span>);\n});\n\n<span class=\"hljs-comment\">// This will work</span>\n<span class=\"hljs-title function_\">injectViaIframe</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">'Hello from iframe!'</span>);\n});\n</code></pre>\n<p>That seemed like an approach I could take, but was running into scoping issues, so\ngave up trying. I ended up settling on the @require method for Firefox, and the\n<strong>Content Script Injection</strong> from <a href=\"https://gist.github.com/\">gist.github.com</a> for Chrome.</p>\n","frontmatter":{"layout":"post","title":"Userscripts and Content Security Policy","published":true,"categories":["Userscript","Javascript"],"tags":["Userscript","Javascript","Git","Github","CSP"]}},{"year":"2013","month":"05","day":"19","slug":"github-enhancement-suite","filename":"2013-05-19-github-enhancement-suite.md","html":"<p>I've created quite a few <a href=\"https://github.com\">Github</a> userscripts to help enhance my experience\nwhen checking out code online. The scripts either add functionality I wish existed, functionality\nI've seen other people request, or functionality that once existed but was removed.</p>\n<p>With the recent <a href=\"/2013/05/userscripts-and-content-security-policy/\">CSP Headers</a> that were added\nto the site, I had to make changes to all my scripts. Since it is starting to be a pain to manage\nso many scripts, and it's even a bigger pain for people if they want to install all of them,\nI've consolidated them all into one script:</p>\n<p><a href=\"https://github.com/skratchdot/github-enhancement-suite\">The Github Enhancement Suite</a>.</p>\n<p>Eventually, I might make this a legitimate browser extension, and add functionality for turning\nfeatures on and off. I'll also probably clean up the code, and decommission the \"one off\" scripts.</p>\n<p>At the time of this writing, here are the scripts that are included:</p>\n<ul>\n<li><a href=\"https://github.com/skratchdot/github-code-search.user.js\">Github: Code Search</a></li>\n<li><a href=\"https://github.com/skratchdot/github-editor-theme.user.js\">Github: Editor Theme</a></li>\n<li><a href=\"https://github.com/skratchdot/github-fork-count.user.js\">Github: Fork Count</a></li>\n<li><a href=\"https://github.com/skratchdot/github-get-missing-descriptions.user.js\">Github: Get Missing Descriptions</a></li>\n<li><a href=\"https://github.com/skratchdot/github-gh-pages-link.user.js\">Github: gh-pages Link</a></li>\n<li><a href=\"https://github.com/skratchdot/github-pull-request-links.user.js\">Github: Pull Request Links</a></li>\n<li><a href=\"https://github.com/skratchdot/github-repo-counts.user.js\">Github: Repo Counts</a></li>\n<li><a href=\"https://github.com/skratchdot/github-repo-filter-info.user.js\">Github: Repo Filter Info</a></li>\n<li><a href=\"https://github.com/skratchdot/github-twitter-link.user.js\">Github: Twitter Link</a></li>\n</ul>\n","frontmatter":{"layout":"post","title":"Github Enhancement Suite","published":true,"categories":["Userscript","Javascript"],"tags":["Userscript","Javascript","Git","Github","Projects"]}},{"year":"2012","month":"12","day":"10","slug":"new-tabs-and-the-back-button-bookmarklet","filename":"2012-12-10-new-tabs-and-the-back-button-bookmarklet.md","html":"<p>If you're anything like me, then you open new links in tabs. Sometimes,\nif the link has been open for a while, you forget what page you were on when you clicked\nthe link. The back button is disabled since you are in a new tab.</p>\n<p>To get around this issue, I use a simple bookmarklet that takes me back to the document\nreferrer. I place the bookmarklet underneath my back button, so I have easy access to it.</p>\n<p>Here's a screenshot of a disabled back button (in a new tab):</p>\n<p><img src=\"/images/posts/2012/12/10/without.png\" alt=\"without referrer bookmarklet\"></p>\n<p>Here's a screenshot of my browser with the \"referrer\" bookmarklet:</p>\n<p><img src=\"/images/posts/2012/12/10/with.png\" alt=\"with referrer bookmarklet\"></p>\n<p>To install the bookmarklet, drag this link to your bookmark toolbar:</p>\n<p><a href=\"javascript:(function(){document.location=document.referrer;}());\">&lt;&lt; referrer</a></p>\n<p>All the bookmarklet does is:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">location</span> = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">referrer</span>;\n</code></pre>\n","frontmatter":{"layout":"post","title":"New Tabs and the Back Button - Bookmarklet","categories":["Javascript","Bookmarklet"],"tags":["Javascript","Bookmarklet"]}},{"year":"2012","month":"12","day":"08","slug":"userscript-github-editor-theme","filename":"2012-12-08-userscript-github-editor-theme.md","html":"<p>Yesterday I saw the following post on <a href=\"http://news.ycombinator.com/\">HackerNews</a>:</p>\n<p><a href=\"http://news.ycombinator.com/item?id=4886560\">Let's make GitHub better, together</a>.</p>\n<p>I saw the section on <a href=\"http://letsmake.github.com/bettertogether/#ace\">Revamping Inline Editing</a>,\nand noticed one of the comments was about the way <a href=\"https://github.com/\">Github</a> uses the\n<a href=\"https://github.com/ajaxorg/ace\">Ace Editor</a>.</p>\n<p>Since I've been working with <a href=\"https://github.com/ajaxorg/ace\">Ace</a> some recently, I decided\nto work on a userscript that let's you switch themes on Github.</p>\n<p><strong>You can check it out here:</strong></p>\n<ul>\n<li><p><a href=\"https://www.skratchdot.com/projects/github-editor-theme.user.js/\">Project Page</a></p>\n</li>\n<li><p><a href=\"https://github.com/skratchdot/github-editor-theme.user.js/\">Github Page</a></p>\n</li>\n<li><p><a href=\"https://github.com/skratchdot/github-editor-theme.user.js/raw/master/github-editor-theme.user.js\">Install</a></p>\n</li>\n</ul>\n<p>Here is the current description from <a href=\"https://raw.github.com/skratchdot/github-editor-theme.user.js/master/README.md\">README.md</a>:</p>\n<h3 id=\"description\">Description</h3>\n<p>Add a \"theme\" dropdown when editing files in the Github UI.</p>\n<h3 id=\"screenshots\">Screenshots</h3>\n<h4 id=\"before-installing-the-user-script\">Before installing the user script:</h4>\n<p><img src=\"https://github.com/skratchdot/github-editor-theme.user.js/raw/master/images/before.png\" alt=\"Before Installation\"></p>\n<h4 id=\"after-installing-the-user-script\">After installing the user script:</h4>\n<p><img src=\"https://github.com/skratchdot/github-editor-theme.user.js/raw/master/images/after.png\" alt=\"After Installation\"></p>\n","frontmatter":{"layout":"post","title":"Userscript - Github: Editor Theme","categories":["Userscript","Javascript"],"tags":["Userscript","Javascript","Git","Github","Projects"]}},{"year":"2012","month":"12","day":"07","slug":"list-tool-a-simple-way-to-compare-lists","filename":"2012-12-07-list-tool-a-simple-way-to-compare-lists.md","html":"<p>This week at work I was comparing 2 lists from 2 different sources. I frequently\nperform tasks like this, and always end up writing the same comparison code over and over.</p>\n<p>One night after work, I decided to write a simple web app to do the list comparisons\nfor me.</p>\n<p>As of now, the app has the following features:</p>\n<ul>\n<li><p><a href=\"https://en.wikipedia.org/wiki/Set_%28mathematics%29\">set operations</a></p>\n</li>\n<li><p>other operations: sort, reverse, unique, trim</p>\n</li>\n<li><p>uses the <a href=\"https://github.com/ajaxorg/ace/\">Ace Editor</a> (instead of default textarea elements)</p>\n</li>\n<li><p>uses <a href=\"http://github.com/twitter/bootstrap/\">Twitter Bootstrap</a></p>\n</li>\n<li><p><a href=\"http://bradfrost.github.com/this-is-responsive/\">responsive design</a>: 4 different display sizes\nwill change the layout</p>\n</li>\n<li><p>live editing: the results/counts will be updated as you add new items to lists</p>\n</li>\n<li><p>a logo visualization of the currently selected comparison operation</p>\n</li>\n<li><p>using <a href=\"http://www.w3.org/TR/workers/\">Web Workers</a> (when available) to support larger datasets</p>\n</li>\n</ul>\n<p>You can check out the project page here:</p>\n<p><a href=\"https://www.skratchdot.com/projects/list-tool/\">Project Page</a></p>\n<p>You can bookmark, and use the application here:</p>\n<p><a href=\"http://projects.skratchdot.com/list-tool/\">List Tool</a></p>\n","frontmatter":{"layout":"post","title":"List Tool: a simple way to compare lists","categories":["Javascript"],"tags":["Javascript","Lists","Sets","Bootstrap","Projects"]}},{"year":"2012","month":"08","day":"12","slug":"userscript-github-get-missing-descriptions","filename":"2012-08-12-userscript-github-get-missing-descriptions.md","html":"<p>On <a href=\"https://github.com\">Github</a> profiles, not all the repositories\nhave description info listed underneath them. Only the repositories\nwith recent updates contain detailed information.</p>\n<p>This is necessary for users with a large number of repos so that page\nload times are acceptable (also, there's no need to show all repo info\nfor someone with 1000+ repos).</p>\n<p>To find out more about older repositories, you have to visit each repo page.</p>\n<p>To help out with this manual process, I've created:\n<a href=\"https://github.com/skratchdot/github-get-missing-descriptions.user.js/\">Github: Get Missing Descriptions</a>.</p>\n<p>This script adds a button that will update \"simple\" repo listings with the\nproject's description, as well as the last time it was updated. Each button\nclick will make a max of 50 ajax requests. If there are more than 50 repos without\ndescriptions, you will have to click the button multiple times.</p>\n<p><strong>You can check it out here:</strong></p>\n<ul>\n<li><p><a href=\"https://www.skratchdot.com/projects/github-get-missing-descriptions.user.js/\">Project Page</a></p>\n</li>\n<li><p><a href=\"https://github.com/skratchdot/github-get-missing-descriptions.user.js/\">Github Page</a></p>\n</li>\n<li><p><a href=\"https://github.com/skratchdot/github-get-missing-descriptions.user.js/raw/master/github-get-missing-descriptions.user.js\">Install</a></p>\n</li>\n</ul>\n<p>Here is the current description from <a href=\"https://raw.github.com/skratchdot/github-get-missing-descriptions.user.js/master/README.md\">README.md</a>:</p>\n<h3 id=\"description\">Description</h3>\n<p>If there are missing descriptions on a Github profile page,\na button will be added. When clicked, ajax requests will be made\nto grab the descriptions.</p>\n<h3 id=\"screenshots\">Screenshots</h3>\n<h4 id=\"before-installing-the-user-script\">Before installing the user script:</h4>\n<p><img src=\"https://github.com/skratchdot/github-get-missing-descriptions.user.js/raw/master/images/before.png\" alt=\"Before Installation\"></p>\n<h4 id=\"after-installing-the-user-script\">After installing the user script:</h4>\n<p><strong>Before clicking the button:</strong><br><img src=\"https://github.com/skratchdot/github-get-missing-descriptions.user.js/raw/master/images/after1.png\" alt=\"After Installation (before clicking the button)\"></p>\n<p><strong>After clicking the button:</strong><br><img src=\"https://github.com/skratchdot/github-get-missing-descriptions.user.js/raw/master/images/after2.png\" alt=\"After Installation (after clicking the button)\"></p>\n","frontmatter":{"layout":"post","title":"Userscript - Github: Get Missing Descriptions","categories":["Userscript","Javascript"],"tags":["Userscript","Javascript","Git","Github","Projects"]}},{"year":"2012","month":"07","day":"05","slug":"userscript-github-twitter-link","filename":"2012-07-05-userscript-github-twitter-link.md","html":"<p>While browsing <a href=\"https://github.com\">Github</a> profiles, I notice I'll frequently\nchange the url from <a href=\"https://github.com\">github.com</a> to <a href=\"https://twitter.com\">twitter.com</a>\nto see if that particular user has a <a href=\"https://twitter.com\">Twitter</a> account.</p>\n<p>To save on some of that manual activity, I created a new userscript today:\n<a href=\"https://github.com/skratchdot/github-twitter-link.user.js/\">Github: Twitter Link</a>.</p>\n<p><strong>You can check it out here:</strong></p>\n<ul>\n<li><p><a href=\"https://www.skratchdot.com/projects/github-twitter-link.user.js/\">Project Page</a></p>\n</li>\n<li><p><a href=\"https://github.com/skratchdot/github-twitter-link.user.js/\">Github Page</a></p>\n</li>\n<li><p><a href=\"https://github.com/skratchdot/github-twitter-link.user.js/raw/master/github-twitter-link.user.js\">Install</a></p>\n</li>\n</ul>\n<p>Here is the current description from <a href=\"https://raw.github.com/skratchdot/github-twitter-link.user.js/master/README.md\">README.md</a>:</p>\n<h3 id=\"description\">Description</h3>\n<p>This is a user script that adds a twitter link on Github profile\npages if a corresponding user name exists at Twitter. It utilizes\nlocal storage to minimize multiple Twitter API requests. If a corresponding\nuser name is not found, then we will not check for it again. At some point I\nmay add a \"time limit\" on when to check again.</p>\n<h3 id=\"screenshots\">Screenshots</h3>\n<h4 id=\"before-installing-the-user-script\">Before installing the user script:</h4>\n<p><img src=\"https://github.com/skratchdot/github-twitter-link.user.js/raw/master/images/before.png\" alt=\"Before Installation\"></p>\n<h4 id=\"after-installing-the-user-script\">After installing the user script:</h4>\n<p><strong>Twitter account exists:</strong><br><img src=\"https://github.com/skratchdot/github-twitter-link.user.js/raw/master/images/after1.png\" alt=\"After Installation - Account exists\"></p>\n<p><strong>Twitter account doesn't exist:</strong><br><img src=\"https://github.com/skratchdot/github-twitter-link.user.js/raw/master/images/after2.png\" alt=\"After Installation - Account doesn't exist\"></p>\n","frontmatter":{"layout":"post","title":"Userscript - Github: Twitter Link","categories":["Userscript","Javascript"],"tags":["Userscript","Javascript","Git","Github","Twitter","Projects"]}},{"year":"2012","month":"05","day":"30","slug":"prevent-console-calls-from-throwing-errors","filename":"2012-05-30-prevent-console-calls-from-throwing-errors.md","html":"<p>If you try to use <strong>window.console</strong> calls in older browsers, an error will be thrown.</p>\n<p>There are a few ways to get around this. One way is to use a\n<a href=\"http://www.calormen.com/polyfill/#console\">console polyfill</a>. Another way is to\nuse a <a href=\"http://benalman.com/projects/javascript-debug-console-log/\">console wrapper</a>.\nYet one additional way is by creating empty functions for all the available\n<strong>window.console</strong> calls.</p>\n<p>This blog post provides some code to achieve the third method listed above. The code\nfirst ensures that <strong>window.console</strong> exists. It then ensures that all functions in\nthe <a href=\"http://getfirebug.com/wiki/index.php/Console_API\">Firebug Console API</a>\nexist in the <strong>window.console</strong> object. We default to an empty function so older browsers\ndon't throw errors. If a given <strong>window.console</strong> function already exists, we will use the\ndefault browser behavior.</p>\n<h3 id=\"un-minified-version\">Un-Minified Version:</h3>\n<!-- prettier-ignore-start -->\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/*jslint browser: true, plusplus: true */</span>\n(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"><span class=\"hljs-variable language_\">window</span></span>) {\n    <span class=\"hljs-string\">'use strict'</span>;\n\n    <span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>,\n        emptyFunction = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {},\n        functionNames = [\n            <span class=\"hljs-string\">'assert'</span>, <span class=\"hljs-string\">'clear'</span>, <span class=\"hljs-string\">'count'</span>, <span class=\"hljs-string\">'debug'</span>, <span class=\"hljs-string\">'dir'</span>,\n            <span class=\"hljs-string\">'dirxml'</span>, <span class=\"hljs-string\">'error'</span>, <span class=\"hljs-string\">'exception'</span>, <span class=\"hljs-string\">'group'</span>, <span class=\"hljs-string\">'groupCollapsed'</span>,\n            <span class=\"hljs-string\">'groupEnd'</span>, <span class=\"hljs-string\">'info'</span>, <span class=\"hljs-string\">'log'</span>, <span class=\"hljs-string\">'profile'</span>, <span class=\"hljs-string\">'profileEnd'</span>, <span class=\"hljs-string\">'table'</span>,\n            <span class=\"hljs-string\">'time'</span>, <span class=\"hljs-string\">'timeEnd'</span>, <span class=\"hljs-string\">'timeStamp'</span>, <span class=\"hljs-string\">'trace'</span>, <span class=\"hljs-string\">'warn'</span>\n        ];\n\n    <span class=\"hljs-comment\">// Make sure window.console exists</span>\n    <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">console</span> = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">console</span> || {};\n\n    <span class=\"hljs-comment\">// Make sure all functions exist</span>\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; functionNames.<span class=\"hljs-property\">length</span>; i++) {\n        <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">console</span>[functionNames[i]] = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">console</span>[functionNames[i]] || emptyFunction;\n    }\n\n}(<span class=\"hljs-variable language_\">window</span>));\n</code></pre>\n<!-- prettier-ignore-end -->\n\n<h3 id=\"minified-version\">Minified Version:</h3>\n<!-- prettier-ignore-start -->\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/* https://www.skratchdot.com/2012/05/prevent-console-calls-from-throwing-errors/ */</span>\n(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">b</span>){<span class=\"hljs-keyword\">var</span> a=<span class=\"hljs-number\">0</span>,c=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>){},d=[<span class=\"hljs-string\">\"assert\"</span>,<span class=\"hljs-string\">\"clear\"</span>,<span class=\"hljs-string\">\"count\"</span>,<span class=\"hljs-string\">\"debug\"</span>,<span class=\"hljs-string\">\"dir\"</span>,<span class=\"hljs-string\">\"dirxml\"</span>,<span class=\"hljs-string\">\"error\"</span>,<span class=\"hljs-string\">\"exception\"</span>,<span class=\"hljs-string\">\"group\"</span>,<span class=\"hljs-string\">\"groupCollapsed\"</span>,<span class=\"hljs-string\">\"groupEnd\"</span>,<span class=\"hljs-string\">\"info\"</span>,<span class=\"hljs-string\">\"log\"</span>,<span class=\"hljs-string\">\"profile\"</span>,<span class=\"hljs-string\">\"profileEnd\"</span>,<span class=\"hljs-string\">\"table\"</span>,<span class=\"hljs-string\">\"time\"</span>,<span class=\"hljs-string\">\"timeEnd\"</span>,<span class=\"hljs-string\">\"timeStamp\"</span>,<span class=\"hljs-string\">\"trace\"</span>,<span class=\"hljs-string\">\"warn\"</span>];b.<span class=\"hljs-property\">console</span>=b.<span class=\"hljs-property\">console</span>||{};<span class=\"hljs-keyword\">for</span>(a=<span class=\"hljs-number\">0</span>;a&lt;d.<span class=\"hljs-property\">length</span>;a++){b.<span class=\"hljs-property\">console</span>[d[a]]=b.<span class=\"hljs-property\">console</span>[d[a]]||c}}(<span class=\"hljs-variable language_\">window</span>));\n</code></pre>\n<!-- prettier-ignore-end -->\n","frontmatter":{"layout":"post","title":"Prevent console calls from throwing errors","categories":["Javascript"],"tags":["Javascript","console"]}},{"year":"2011","month":"07","day":"25","slug":"domformat-v1-0-released-july-25-2011","filename":"2011-07-25-domformat-v1-0-released-july-25-2011.md","html":"<p>domFormat is a simple javascript library to get DOM nodes as formatted/pretty strings.</p>\n<p>You can find the source code here:</p>\n<p><a href=\"https://github.com/skratchdot/domFormat\">https://github.com/skratchdot/domFormat</a></p>\n<p>And some examples here:</p>\n<p><a href=\"http://projects.skratchdot.com/domFormat/examples/index-html5.html\">http://projects.skratchdot.com/domFormat/examples/index-html5.html</a></p>\n<p>Here are 2 bookmarklets:</p>\n<ul>\n<li><p><a href=\"javascript:%28function%28%29%7Bvar%20doc%3Ddocument.cloneNode%28true%29%7C%7Cdocument%3Bvar%20script%3Ddocument.createElement%28'script'%29%3Bscript.setAttribute%28'src'%2C'http%3A%2F%2Fprojects.skratchdot.com%2FdomFormat%2FdomFormat.min.js'%29%3Bscript.addEventListener%28'load'%2Cfunction%28%29%7Bvar%20domString%3DdomFormat.getString%28doc%29%3Bdocument.write%28'%3Ctextarea%20wrap%3D%22off%22%20id%3D%22showSource%22%20style%3D%22width%3A100%25%3Bheight%3A100%25%3Bborder%3A0%3Bmargin%3A0%3Bpadding%3A0%3Bwhitespace%3Anowrap%3B%22%3E%3C%2Ftextarea%3E'%29%3Bdocument.getElementById%28'showSource'%29.value%3DdomString%3Bdocument.close%28%29%3B%7D%2Cfalse%29%3Bdocument.body.appendChild%28script%29%3B%7D%28%29%29;\">-- Show Source --</a></p>\n</li>\n<li><p><a href=\"javascript:%28function%28%29%7Bvar%20doc%3Ddocument.cloneNode%28true%29%7C%7Cdocument%3Bvar%20script%3Ddocument.createElement%28'script'%29%3Bscript.setAttribute%28'src'%2C'http%3A%2F%2Fprojects.skratchdot.com%2FdomFormat%2FdomFormat.min.js'%29%3Bscript.addEventListener%28'load'%2Cfunction%28%29%7Bvar%20domString%3DdomFormat.getString%28doc%29%3Bdocument.write%28domString%29%3Bdocument.close%28%29%3B%7D%2Cfalse%29%3Bdocument.body.appendChild%28script%29%3B%7D%28%29%29;\">-- Reload Page With Formatted Source --</a></p>\n</li>\n</ul>\n","frontmatter":{"layout":"post","title":"domFormat - v1.0 (Released July 25, 2011)","categories":["Javascript","Bookmarklet"],"tags":["Bookmarklet","DOM","Javascript","Projects"]}},{"year":"2010","month":"10","day":"10","slug":"links-javascript","filename":"2010-10-10-links-javascript.md","html":"<h2 id=\"books\">Books:</h2>\n<ul>\n<li><a href=\"http://oreilly.com/catalog/9780596517748/\">Javascript: The Good Parts</a></li>\n<li><a href=\"http://oreilly.com/catalog/9780596101992/\">Javascript: The Definitive Guide</a></li>\n</ul>\n<h2 id=\"toolsblogs\">TOOLS/BLOGS:</h2>\n<ul>\n<li><a href=\"http://jquery.com/\">jQuery: The Write Less, Do More, Javascript Library</a></li>\n<li><a href=\"http://www.jslint.com/\">JSLint: The JavaScript Code Quality Tool</a></li>\n<li><a href=\"https://developer.mozilla.org/en/JavaScript/Guide\">Mozilla: Javascript Guide</a></li>\n<li><a href=\"https://developer.mozilla.org/en/A_re-introduction_to_JavaScript\">Mozilla: A Re-Introduction To Javascript</a></li>\n<li><a href=\"http://ajaxian.com/\">Ajaxian</a></li>\n<li><a href=\"http://www.quirksmode.org/\">QuirksMode</a></li>\n</ul>\n<h2 id=\"videos\">VIDEOS:</h2>\n<h3 id=\"the-javascript-programming-language\">The JavaScript Programming Language</h3>\n<ul>\n<li><a href=\"http://video.yahoo.com/watch/111593/1710507\">Douglas Crockford: \"The JavaScript Programming Language\"/1 of 4</a></li>\n<li><a href=\"http://video.yahoo.com/watch/111594/1710553\">Douglas Crockford: \"The JavaScript Programming Language\"/2 of 4</a></li>\n<li><a href=\"http://video.yahoo.com/watch/111595/1710607\">Douglas Crockford: \"The JavaScript Programming Language\"/3 of 4</a></li>\n<li><a href=\"http://video.yahoo.com/watch/111596/1710658\">Douglas Crockford: \"The JavaScript Programming Language\"/4 of 4</a></li>\n</ul>\n<h3 id=\"an-inconvenient-api-the-theory-of-the-dom\">An Inconvenient API: The Theory of the DOM</h3>\n<ul>\n<li><a href=\"http://video.yahoo.com/watch/111582/992708\">Douglas Crockford: \"Theory of the DOM\" (1 of 3)</a></li>\n<li><a href=\"http://video.yahoo.com/watch/111583/996002\">Douglas Crockford: \"Theory of the DOM\" (2 of 3)</a></li>\n<li><a href=\"http://video.yahoo.com/watch/111584/996008\">Douglas Crockford: \"Theory of the DOM\" (3 of 3)</a></li>\n</ul>\n<h3 id=\"advanced-javascript\">Advanced JavaScript</h3>\n<ul>\n<li><a href=\"http://video.yahoo.com/watch/111585/1027823\">Douglas Crockford: \"Advanced JavaScript\" (1 of 3)</a></li>\n<li><a href=\"http://video.yahoo.com/watch/111586/1027832\">Douglas Crockford: \"Advanced JavaScript\" (2 of 3)</a></li>\n<li><a href=\"http://video.yahoo.com/watch/111587/1027854\">Douglas Crockford: \"Advanced JavaScript\" (3 of 3)</a></li>\n</ul>\n<h3 id=\"crockford-on-javascript-link\">Crockford on JavaScript <a href=\"http://www.yuiblog.com/crockford/\">(link)</a></h3>\n<ul>\n<li><a href=\"http://developer.yahoo.com/yui/theater/video.php?v=crockonjs-1\">Volume One: The Early Years</a></li>\n<li><a href=\"http://developer.yahoo.com/yui/theater/video.php?v=crockonjs-2\">Chapter 2: And Then There Was JavaScript</a></li>\n<li><a href=\"http://developer.yahoo.com/yui/theater/video.php?v=crockonjs-3\">Act III: Function the Ultimate</a></li>\n<li><a href=\"http://developer.yahoo.com/yui/theater/video.php?v=crockonjs-4\">Episode IV: The Metamorphosis of Ajax</a></li>\n<li><a href=\"http://developer.yahoo.com/yui/theater/video.php?v=crockonjs-5\">Part V: The End of All Things</a></li>\n<li><a href=\"http://developer.yahoo.com/yui/theater/video.php?v=crockford-loopage\">Scene 6: Loopage</a></li>\n</ul>\n<h3 id=\"john-resig-advancing-javascript-with-libraries\">John Resig: \"Advancing JavaScript with Libraries</h3>\n<ul>\n<li><a href=\"http://video.yahoo.com/watch/410472/2391234\">John Resig: \"Advancing JavaScript with Libraries\"/1 of 2</a></li>\n<li><a href=\"http://video.yahoo.com/watch/412541/2395771\">John Resig: \"Advancing JavaScript with Libraries\"/2 of 2</a></li>\n</ul>\n<h3 id=\"jsconfeu-link\">JSConf.eu <a href=\"http://jsconfeu.blip.tv/\">(link)</a></h3>\n<ul>\n<li><a href=\"http://jsconfeu.blip.tv/file/3060565/\">Steve Souders: Fast by Default</a></li>\n<li><a href=\"http://jsconfeu.blip.tv/file/2899135/\">Ryan Dahl: Node.js</a></li>\n<li><a href=\"http://jsconfeu.blip.tv/file/2997761/\">Douglas Crockford: The State and Future of JavaScript</a></li>\n<li><a href=\"http://jsconfeu.blip.tv/file/3047969/\">Francisco Tolmasky: Building Desktop-Caliber Web Apps With Cappuccino and Atlas</a></li>\n<li><a href=\"http://jsconfeu.blip.tv/file/2929265/\">Dion Almaer: Future of the Web</a></li>\n<li><a href=\"http://jsconfeu.blip.tv/file/3004532/\">Robert Nyman: JavaScript - From Birth to Closure</a></li>\n<li><a href=\"http://jsconfeu.blip.tv/file/3161656/\">Peter Svensson</a></li>\n<li><a href=\"http://jsconfeu.blip.tv/file/3158592/\">Fabian Jakobs</a></li>\n<li><a href=\"http://jsconfeu.blip.tv/file/3157409/\">Alexandre Morgaut</a></li>\n<li><a href=\"http://jsconfeu.blip.tv/file/3156628/\">Viereck | Almaer</a></li>\n<li><a href=\"http://jsconfeu.blip.tv/file/3054882/\">Faruk Ates: JavaScript in the age of HTML5 and CSS 3</a></li>\n<li><a href=\"http://jsconfeu.blip.tv/file/3054322/\">Christophe Porteneuve: Aggregation with Sprockets</a></li>\n<li><a href=\"http://jsconfeu.blip.tv/file/2961254/\">Alois Reitbauer: Tracing JS Performance</a></li>\n<li><a href=\"http://jsconfeu.blip.tv/file/2999333/\">Thomas Fuchs: Extreme JavaScript Performance</a></li>\n<li><a href=\"http://jsconfeu.blip.tv/file/2996025/\">Remy Sharp: HTML5 JavaScript APIs</a></li>\n<li><a href=\"http://jsconfeu.blip.tv/file/2992604/\">Malte Ubl: A Meta Object System for JavaScript</a></li>\n<li><a href=\"http://jsconfeu.blip.tv/file/2961086/\">Alexander Lang: Writing apps on the edge with CouchDB</a></li>\n</ul>\n","frontmatter":{"layout":"post","title":"Links: Javascript","categories":["Javascript"],"tags":["Javascript","Links: Javascript"]}}]},"__N_SSG":true}