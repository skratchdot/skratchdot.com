{"pageProps":{"posts":[{"year":"2016","month":"01","day":"27","slug":"creating-virtual-midi-ports-on-osx","filename":"2016-01-27-creating-virtual-midi-ports-on-osx.md","html":"<h2 id=\"introduction\">Introduction</h2>\n<p><a href=\"http://webaudio.github.io/web-midi-api/\">WebMidi</a> is a technology that has been\nemerging for a few years now, and it's finally supported in Chrome by default.\nEven browsers that don't support it can use the\n<a href=\"https://github.com/cwilso/WebMIDIAPIShim\">WebMIDIAPIShim</a>\nby <a href=\"https://github.com/cwilso/\">Chris Wilson</a> to add support. For a list of\ncurrent support, check out <a href=\"http://caniuse.com/#feat=midi\">caniuse.com</a>.</p>\n<p>If you are not a musician or audio hobbyist, you might not have any midi\ndevices setup, and will not be able to get the full experience on websites that\nare starting to enable midi features.</p>\n<p>Fear not, you can setup virtual midi devices that can be used on these websites.\nThere are ways to do this on all operating systems. This tutorial is focused\non OSX, but Window users can check out tools like\n<a href=\"http://www.midiox.com/myoke.htm\">Midi Yoke</a>,\n<a href=\"http://www.nerds.de/en/loopbe1.html\">LoopBe1</a>,\n<a href=\"http://www.sonycreativesoftware.com/dl/dl.aspx?dwnid=77\">Sony Virtual MIDI Router</a>,\nor <a href=\"http://www.tobias-erichsen.de/software/loopmidi.html\">loopMIDI</a>\nand Linux users can try\n<a href=\"http://www.alsa-project.org/main/index.php/Main_Page\">ALSA</a>\nor <a href=\"http://qjackctl.sourceforge.net/\">QJackCtl</a>.</p>\n<h2 id=\"creating-virtual-midi-ports-on-osx\">Creating Virtual MIDI Ports On OSX</h2>\n<h4 id=\"step-1-open-audio-midi-setup\">Step 1: Open <strong>Audio MIDI Setup</strong></h4>\n<p>You can open <strong>Audio MIDI Setup</strong> by searching Spotlight, by looking in\n<strong>/Applications/Utilities/</strong>, or by using Launchpad:</p>\n<p><img src=\"https://www.skratchdot.com/images/posts/2016/01/27/launchpad.png\" alt=\"Launchpad\"></p>\n<h4 id=\"step-2-show-midi-studio\">Step 2: Show <strong>MIDI Studio</strong></h4>\n<p>Once <strong>Audio MIDI Setup</strong> is open, you can open the <strong>Midi Studio</strong> window:</p>\n<p><img src=\"https://www.skratchdot.com/images/posts/2016/01/27/midi-studio.png\" alt=\"Midi Studio\"></p>\n<h4 id=\"step-3-open-iac-driver\">Step 3: Open <strong>IAC Driver</strong></h4>\n<p>Now you can open <strong>IAC Driver (Inter Application Communications Driver)</strong> by\ndouble clicking on the icon:</p>\n<p><img src=\"https://www.skratchdot.com/images/posts/2016/01/27/iac-driver.png\" alt=\"IAC Driver\"></p>\n<p>Which opens this window:</p>\n<p><img src=\"https://www.skratchdot.com/images/posts/2016/01/27/iac-driver-window.png\" alt=\"IAC Driver Window\"></p>\n<h4 id=\"step-4-add-virtual-port\">Step 4: Add Virtual Port</h4>\n<ul>\n<li>Click the \"Add and Remove Ports Button\"</li>\n<li>A new port called \"IAC Bus 2\" will be added.</li>\n<li>Rename the port to \"WebMidi\" by clicking on the port you want to rename</li>\n<li><strong>IMPORTANT:</strong> Make sure to check the \"Device is online\" box at the top.</li>\n</ul>\n<p>After making the following changes you should see:</p>\n<p><img src=\"https://www.skratchdot.com/images/posts/2016/01/27/iac-driver-finished.png\" alt=\"IAC Driver Finished\"></p>\n<p>Now that you have your virtual driver / port setup, you can install / use a\nvirtual MIDI keyboard on your favorite WebMidi enabled website. For\ninstructions on installing a Virtual MIDI Keyboard, continue reading below.</p>\n<h2 id=\"install--use-a-virtual-midi-keyboard\">Install / Use a Virtual MIDI Keyboard</h2>\n<p>A few options:</p>\n<ul>\n<li><a href=\"http://vmpk.sourceforge.net/\">Virtual MIDI Piano Keyboard</a></li>\n<li><a href=\"http://www.manyetas.com/creed/midikeys.html\">Midi Keys</a></li>\n</ul>\n<p>Since I use <a href=\"http://brew.sh/\">homebrew</a> with <a href=\"http://caskroom.io/\">cask</a>,\nI'm going to install midikeys. You can do this by opening your command line,\nand running:</p>\n<pre><code class=\"hljs language-bash\">brew cask install midikeys\n</code></pre>\n<p><img src=\"https://www.skratchdot.com/images/posts/2016/01/27/midikeys-install.png\" alt=\"MidiKeys - Install\"></p>\n<p>Now that MidiKeys is installed, you can open it via Launchpad:</p>\n<p><img src=\"https://www.skratchdot.com/images/posts/2016/01/27/midikeys-launchpad.png\" alt=\"MidiKeys - Launchpad\"></p>\n<p>Once the program is opened, make sure to choose \"IAC Drive: WebMidi\" from the\n\"Destination\" dropdown:</p>\n<p><img src=\"https://www.skratchdot.com/images/posts/2016/01/27/midikeys-usage.png\" alt=\"MidiKeys - Usage\"></p>\n<p>You can now click on keys from that virtual keyboard to send MIDI events to the\nWebMidi virtual port you created earlier.</p>\n<p>There are other options for virtual keyboards / software, but this is a quick way\nto get up and running. More advanced users can try out programs like\n<a href=\"https://puredata.info/\">Pure Data</a> by running</p>\n<pre><code class=\"hljs language-bash\">brew cask install pd\n</code></pre>\n<p>and creating their own virtual midi keyboard / instrument for usage with WebMidi.</p>\n<p>Better yet, create your own WebMidi instrument that sends output to other\nWebMidi enabled devices!</p>\n","frontmatter":{"layout":"post","title":"Creating Virtual MIDI Ports On OSX for WebMidi","published":true,"categories":["Javascript","MIDI"],"tags":["Javascript","Audio","MIDI","Web","Tutorial"]}},{"year":"2013","month":"08","day":"25","slug":"audio-grid-web-based-audio-tool","filename":"2013-08-25-audio-grid-web-based-audio-tool.md","html":"<p>A few years ago I saw the great <a href=\"http://tonematrix.audiotool.com/\">Tone Matrix</a> tool by\n<a href=\"http://andre-michelle.com/\">Andre Michelle</a>. It's a flash based audio experiment that\nlet's you highlight items in a matrix to create music.</p>\n<p>With newer browsers, you are finally able to implement some of the things you could do in\nflash years ago, without requiring browser plugins. I created\n<a href=\"http://projects.skratchdot.com/audio-grid/index.html\">Audio Grid</a> as an experiment to explore\nthis fact.</p>\n<p>It's using <a href=\"http://mohayonao.github.io/timbre.js/\">timbre.js</a> for it's core functionality, but\nis also making use of a few libraries that I recently created for use in\n<a href=\"/projects/audio-sort/\">Audio Sort</a>:</p>\n<ul>\n<li><p><a href=\"https://github.com/skratchdot/soundfont2mp3\">soundfont2mp3</a> - a command line utility that lets\nyou extract single note mp3s from soundfont files.</p>\n</li>\n<li><p><a href=\"https://github.com/skratchdot/timbre.soundfont.js\">timbre.soundfont.js</a> - play soundfont urls\nusing timbre.js</p>\n</li>\n<li><p><a href=\"https://github.com/skratchdot/timbre.mp3_decode.js\">timbre.mp3_decode.js</a> - a timbre.js plugin\nthat decodes mp3s using jsmad</p>\n</li>\n<li><p><a href=\"https://code.google.com/p/free-midi/\">free-midi</a> - a collection of mp3s generated by\n<a href=\"https://github.com/skratchdot/soundfont2mp3\">soundfont2mp3</a> and the\n<a href=\"http://www.schristiancollins.com/generaluser.php\">S. Christian Collins GeneralUser GS Soundfont</a>.</p>\n</li>\n</ul>\n<p>You can see a demo of <a href=\"\">Audio Grid</a> by clicking on the image below:</p>\n<p><a href=\"http://projects.skratchdot.com/audio-grid/index.html\" class=\"noBackground noBorder\"><img src=\"http://projects.skratchdot.com/audio-grid/img/preview.jpg\" alt=\"Audio Grid\"></a></p>\n","frontmatter":{"layout":"post","title":"Audio Grid - Web-Based Audio Tool","published":true,"categories":["Javascript","AudioGrid"],"tags":["Javascript","Audio","Algorithms","Bootstrap","Projects"]}},{"year":"2013","month":"07","day":"15","slug":"audio-sort-visualize-and-audibilize-sorting-algorithms","filename":"2013-07-15-audio-sort-visualize-and-audibilize-sorting-algorithms.md","html":"<p>A few weeks ago I saw a <a href=\"http://www.youtube.com/watch?v=t8g-iYGHpEA\">video on youtube</a> that\nshowed what different sorting algorithms look (and sound) like as they are executing.</p>\n<p>Since I've been playing with <a href=\"http://mohayonao.github.io/timbre.js/\">timbre.js</a> lately,\nI started to wonder if I could make a web app to accomplish something similar (using javascript\nand <a href=\"https://github.com/skratchdot/audio-sort/#built-with\">modern web libraries</a>).</p>\n<p>I also wanted to attempt to make the audio \"sound good\".</p>\n<p>I came up with something fairly quickly, but then started researching websites that provided\nsimilar functionality. The more I researched, the more features I wanted to add. Check\nthe <a href=\"https://github.com/skratchdot/audio-sort/#see-also--credits\">long list of links</a>\nI researched while working on <a href=\"http://projects.skratchdot.com/audio-sort/index.html\">Audio Sort</a>.</p>\n<p>I plan to <a href=\"https://github.com/skratchdot/audio-sort/blob/gh-pages/TODO.md\">add more features</a>\ndepending on how bored I get. Check out <a href=\"http://projects.skratchdot.com/audio-sort/index.html\">Audio Sort</a>\nbelow:</p>\n<p><a href=\"http://projects.skratchdot.com/audio-sort/index.html\" class=\"noBackground noBorder\"><img src=\"http://projects.skratchdot.com/audio-sort/img/preview.jpg\" alt=\"Audio Sort\"></a></p>\n","frontmatter":{"layout":"post","title":"Audio Sort - Visualize and Audibilize Sorting Algorithms","published":true,"categories":["Javascript","AudioSort"],"tags":["Javascript","Audio","Algorithms","Bootstrap","Projects"]}},{"year":"2013","month":"05","day":"19","slug":"userscripts-and-content-security-policy","filename":"2013-05-19-userscripts-and-content-security-policy.md","html":"<p>Last month, Github started to include some\n<a href=\"https://en.wikipedia.org/wiki/Content_Security_Policy\">Content Security Policy Headers</a>.</p>\n<p>They wrote a <a href=\"https://github.com/blog/1477-content-security-policy\">blog post</a> describing\nthe problems CSP headers try to solve, how to prepare your app for including the headers,\nand listed some of the current limitations you may encounter when using the headers.</p>\n<p>I've ran into some of these limitations with the Github userscripts I've authored.</p>\n<p>First off, to make a cross browser userscript, there are a few problems that I've ran into.\nIf your userscript needs to access variables on a page, you can use a few techniques:</p>\n<ul>\n<li><a href=\"http://wiki.greasespot.net/UnsafeWindow\">Unsafe Window</a></li>\n<li><a href=\"http://wiki.greasespot.net/Location_hack\">Location Hack</a></li>\n<li><a href=\"http://wiki.greasespot.net/Content_Script_Injection\">Content Script Injection</a></li>\n</ul>\n<p>Of these three, <strong>Content Script Injection</strong> is the preferred method. It works for both\nFirefox and Chrome. I've been using a variation of that method for most of the scripts I've\nwritten in the past.</p>\n<p>Here's how I would typically write my scripts:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Create some js that you want to inject into the page</span>\n<span class=\"hljs-keyword\">var</span> main = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {};\n\n<span class=\"hljs-comment\">// Inject our main script into the page</span>\n<span class=\"hljs-keyword\">var</span> script = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">'script'</span>);\nscript.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">'('</span> + main.<span class=\"hljs-title function_\">toString</span>() + <span class=\"hljs-string\">')();'</span>;\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">appendChild</span>(script);\n</code></pre>\n<p>After Github started sending CSP headers, my userscripts broke by throwing errors like:</p>\n<pre><code class=\"hljs language-plaintext\">CSP ERROR:  Couldn't parse invalid source 'unsafe-inline'\n</code></pre>\n<p>To fix Firefox, I temporarily removed the <strong>Content Script Injection</strong> hacks I was using. Here's\nan example commit I made back in April:</p>\n<p><a href=\"https://github.com/skratchdot/github-repo-counts.user.js/commit/80f77bc3d588ef5fcd411a3dc77062166b091713\">https://github.com/skratchdot/github-repo-counts.user.js/commit/80f77bc3d588ef5fcd411a3dc77062166b091713</a></p>\n<p>What I forgot when making those commits, is that Chrome userscripts do not work the same way as\nFirefox userscripts.</p>\n<p>To make Chrome userscripts work, I <em>needed</em> to use <strong>Content Script Injection</strong>. The issue is that\nGithub is sending the following CSP headers:</p>\n<pre><code class=\"hljs language-plaintext\">x-content-security-policy: default-src *; script-src https://github.com https://a248.e.akamai.net https://jobs.github.com https://ssl.google-analytics.com https://secure.gaug.es https://collector.githubapp.com https://gist.github.com; style-src https://github.com https://a248.e.akamai.net 'unsafe-inline'; object-src https://github.com https://a248.e.akamai.net\n</code></pre>\n<p>If you notice, I can only use the <strong>Content Script Injection</strong> method from the following domains:</p>\n<ul>\n<li><a href=\"https://github.com\">https://github.com</a></li>\n<li><a href=\"https://a248.e.akamai.net\">https://a248.e.akamai.net</a></li>\n<li><a href=\"https://jobs.github.com\">https://jobs.github.com</a></li>\n<li><a href=\"https://ssl.google-analytics.com\">https://ssl.google-analytics.com</a></li>\n<li><a href=\"https://secure.gaug.es\">https://secure.gaug.es</a></li>\n<li><a href=\"https://collector.githubapp.com\">https://collector.githubapp.com</a></li>\n<li><a href=\"https://gist.github.com\">https://gist.github.com</a></li>\n</ul>\n<p>I had been hotlinking my scripts from the raw.github.com domain.</p>\n<p>To fix, I started hosting my scripts in a <a href=\"https://gist.github.com/skratchdot/5604120\">Gist</a>.</p>\n<p>Since Firefox supports the @require userscript annotation, I rely on that. For Chrome, I am using\n<strong>Content Script Injection</strong>. The reason I didn't use <strong>Content Script Injection</strong> for Firefox, is\nbecause @require does some caching, and I was also experiencing some weird behavior in Firefox in\nwhich certain requests to <a href=\"https://gist.github.com/\">gist.github.com</a> were returning no content\n(0 byte requests)- and my scripts weren't working.</p>\n<p>I haven't experienced that behavior with Chrome requests.</p>\n<p>Another method I was toying with, is by injecting the scripts via an iframe. Go to any\n<a href=\"https://github.com/\">github.com</a> page, and run the following code in Chrome's console:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> injectViaScript = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fn</span>) {\n  <span class=\"hljs-keyword\">var</span> script = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">'script'</span>);\n  script.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">'('</span> + fn.<span class=\"hljs-title function_\">toString</span>() + <span class=\"hljs-string\">'());'</span>;\n  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">appendChild</span>(script);\n  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">removeChild</span>(script);\n};\n\n<span class=\"hljs-keyword\">var</span> injectViaIframe = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fn</span>) {\n  <span class=\"hljs-keyword\">var</span> fnName = <span class=\"hljs-string\">'dynamic_fn_'</span> + <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">getTime</span>(),\n    iframe = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">'iframe'</span>);\n  iframe.<span class=\"hljs-property\">onload</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    parent.<span class=\"hljs-property\">window</span>[fnName] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Function</span>(<span class=\"hljs-string\">'('</span> + fn.<span class=\"hljs-title function_\">toString</span>() + <span class=\"hljs-string\">'());'</span>);\n    parent.<span class=\"hljs-property\">window</span>[fnName]();\n    parent.<span class=\"hljs-property\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">removeChild</span>(iframe);\n  };\n  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">appendChild</span>(iframe);\n};\n\n<span class=\"hljs-comment\">// This will throw an error</span>\n<span class=\"hljs-title function_\">injectViaScript</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">'Hello from script!'</span>);\n});\n\n<span class=\"hljs-comment\">// This will work</span>\n<span class=\"hljs-title function_\">injectViaIframe</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">'Hello from iframe!'</span>);\n});\n</code></pre>\n<p>That seemed like an approach I could take, but was running into scoping issues, so\ngave up trying. I ended up settling on the @require method for Firefox, and the\n<strong>Content Script Injection</strong> from <a href=\"https://gist.github.com/\">gist.github.com</a> for Chrome.</p>\n","frontmatter":{"layout":"post","title":"Userscripts and Content Security Policy","published":true,"categories":["Userscript","Javascript"],"tags":["Userscript","Javascript","Git","Github","CSP"]}},{"year":"2013","month":"05","day":"19","slug":"github-enhancement-suite","filename":"2013-05-19-github-enhancement-suite.md","html":"<p>I've created quite a few <a href=\"https://github.com\">Github</a> userscripts to help enhance my experience\nwhen checking out code online. The scripts either add functionality I wish existed, functionality\nI've seen other people request, or functionality that once existed but was removed.</p>\n<p>With the recent <a href=\"/2013/05/userscripts-and-content-security-policy/\">CSP Headers</a> that were added\nto the site, I had to make changes to all my scripts. Since it is starting to be a pain to manage\nso many scripts, and it's even a bigger pain for people if they want to install all of them,\nI've consolidated them all into one script:</p>\n<p><a href=\"https://github.com/skratchdot/github-enhancement-suite\">The Github Enhancement Suite</a>.</p>\n<p>Eventually, I might make this a legitimate browser extension, and add functionality for turning\nfeatures on and off. I'll also probably clean up the code, and decommission the \"one off\" scripts.</p>\n<p>At the time of this writing, here are the scripts that are included:</p>\n<ul>\n<li><a href=\"https://github.com/skratchdot/github-code-search.user.js\">Github: Code Search</a></li>\n<li><a href=\"https://github.com/skratchdot/github-editor-theme.user.js\">Github: Editor Theme</a></li>\n<li><a href=\"https://github.com/skratchdot/github-fork-count.user.js\">Github: Fork Count</a></li>\n<li><a href=\"https://github.com/skratchdot/github-get-missing-descriptions.user.js\">Github: Get Missing Descriptions</a></li>\n<li><a href=\"https://github.com/skratchdot/github-gh-pages-link.user.js\">Github: gh-pages Link</a></li>\n<li><a href=\"https://github.com/skratchdot/github-pull-request-links.user.js\">Github: Pull Request Links</a></li>\n<li><a href=\"https://github.com/skratchdot/github-repo-counts.user.js\">Github: Repo Counts</a></li>\n<li><a href=\"https://github.com/skratchdot/github-repo-filter-info.user.js\">Github: Repo Filter Info</a></li>\n<li><a href=\"https://github.com/skratchdot/github-twitter-link.user.js\">Github: Twitter Link</a></li>\n</ul>\n","frontmatter":{"layout":"post","title":"Github Enhancement Suite","published":true,"categories":["Userscript","Javascript"],"tags":["Userscript","Javascript","Git","Github","Projects"]}},{"year":"2013","month":"04","day":"13","slug":"open-electribe-editor-v1-2-0-released","filename":"2013-04-13-open-electribe-editor-v1-2-0-released.md","html":"<h3 id=\"v120---released-april-13-2013\">v1.2.0 - Released April 13, 2013</h3>\n<p>Download here: <a href=\"http://code.google.com/p/open-electribe-editor/downloads/list\">http://code.google.com/p/open-electribe-editor/downloads/list</a></p>\n<h4 id=\"release-notes\">Release Notes:</h4>\n<ul>\n<li>[<a href=\"https://github.com/skratchdot/open-electribe-editor/issues/27\">BUG: #27</a>] Pattern Import not working when source pattern contains empty samples</li>\n</ul>\n","frontmatter":{"layout":"post","title":"Open Electribe Editor - v1.2.0 Released","published":true,"categories":["Electribe"],"tags":["Electribe","ESX-1","Korg","Projects","Update"]}},{"year":"2013","month":"04","day":"13","slug":"npm-dview-a-command-line-tool","filename":"2013-04-13-npm-dview-a-command-line-tool.md","html":"<p>I've been working on a few node apps lately, and have sometimes been specifying specific\nversion numbers in my <a href=\"https://npmjs.org/doc/json.html#dependencies\">package.json</a> files\nrather than using <a href=\"https://npmjs.org/doc/json.html#Tilde-Version-Ranges\">Tilde-Version-Ranges</a>\nor <a href=\"https://npmjs.org/doc/json.html#X-Version-Ranges\">X-Version-Ranges</a>. When specifying specific\nversion numbers, running <code>npm update</code> will not update those packages.</p>\n<p>There's not an easy way to compare the versions you specified in your package.json file\nwith the latest remotely published version.</p>\n<p>In comes <a href=\"/projects/npm-dview\">npm-dview</a> to the rescue. Check out the\n<a href=\"/projects/npm-dview\">project page</a> for screenshots and other usage instructions.</p>\n<p>Or install now by running:</p>\n<pre><code class=\"hljs language-bash\">npm install -g npm-dview\n</code></pre>\n","frontmatter":{"layout":"post","title":"npm-dview - (a command line tool)","categories":["Bash","Shell","Node.js"],"tags":["Bash","Shell","Javascript","Node","Github","Projects"]}},{"year":"2013","month":"01","day":"06","slug":"open-electribe-editor-v1-1-0-released","filename":"2013-01-06-open-electribe-editor-v1-1-0-released.md","html":"<h3 id=\"v110---released-january-6-2013\">v1.1.0 - Released January 6, 2013</h3>\n<p>Download here: <a href=\"http://code.google.com/p/open-electribe-editor/downloads/list\">http://code.google.com/p/open-electribe-editor/downloads/list</a></p>\n<h4 id=\"release-notes\">Release Notes:</h4>\n<ul>\n<li><p>[<a href=\"https://github.com/skratchdot/open-electribe-editor/issues/11\">BUG: #11</a>] Imports/Exports showing up twice in context menu</p>\n</li>\n<li><p>[<a href=\"https://github.com/skratchdot/open-electribe-editor/issues/12\">BUG: #12</a>] Auto scroll when using context menu.</p>\n</li>\n<li><p>[<a href=\"https://github.com/skratchdot/open-electribe-editor/issues/21\">BUG: #21</a>] Can't Save and problems to import Patterns</p>\n</li>\n<li><p>[<a href=\"https://github.com/skratchdot/open-electribe-editor/issues/22\">BUG: #22</a>] Stereo samples not saving correctly. Mono samples not playing correctly.</p>\n</li>\n<li><p>[<a href=\"https://github.com/skratchdot/open-electribe-editor/issues/18\">FEATURE REQUEST: #18</a>] Add functions for selecting unused items.</p>\n</li>\n<li><p>[<a href=\"https://github.com/skratchdot/open-electribe-editor/issues/23\">FEATURE REQUEST: #23</a>] Make IsLoop? more clear for stereo samples.</p>\n</li>\n<li><p>removing unused command: \"Export Selected Audio Files\"</p>\n</li>\n<li><p>AudioPlayer no longer hangs, or becomes unresponsive.</p>\n</li>\n</ul>\n","frontmatter":{"layout":"post","title":"Open Electribe Editor - v1.1.0 Released","published":true,"categories":["Electribe"],"tags":["Electribe","ESX-1","Korg","Projects","Update"]}},{"year":"2012","month":"12","day":"12","slug":"mesh-mongodb-insert-array-addition","filename":"2012-12-12-mesh-mongodb-insert-array-addition.md","html":"<p>I just updated <a href=\"https://www.skratchdot.com/projects/mesh/\">mesh - MongoDB Extended Shell</a>\nagain by adding a function that you can call on <a href=\"http://www.mongodb.org/\">MongoDB</a> collections.</p>\n<p>The new function is called <strong>insertArray()</strong>.</p>\n<p>It allows you to insert an array of objects into a collection using a shell version of\n<a href=\"http://en.wikipedia.org/wiki/Syntactic_sugar\">Syntactic Sugar</a>.</p>\n<p>All it does is loop through the array that was passed in, calling\n<strong>DBCollection.insert()</strong> on each object in the array.</p>\n<p>If an item in the array is not an object, it will skip the insert, print a warning, and continue\nprocessing the next item in the array.</p>\n<p>If you don't pass in a valid array, it will throw an error.</p>\n<p>Example uses are:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// insert 2 items into myCollection</span>\n<span class=\"hljs-keyword\">var</span> myArray = [\n  { <span class=\"hljs-attr\">_id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">test</span>: <span class=\"hljs-number\">1</span> },\n  { <span class=\"hljs-attr\">_id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">test</span>: <span class=\"hljs-string\">'foo'</span> },\n];\ndb.<span class=\"hljs-property\">myCollection</span>.<span class=\"hljs-title function_\">insertArray</span>(myArray);\n\n<span class=\"hljs-comment\">// transfer 10 items from collection1 into collection2</span>\ndb.<span class=\"hljs-property\">collection2</span>.<span class=\"hljs-title function_\">insertArray</span>(db.<span class=\"hljs-property\">collection1</span>.<span class=\"hljs-title function_\">find</span>().<span class=\"hljs-title function_\">limit</span>(<span class=\"hljs-number\">10</span>).<span class=\"hljs-title function_\">toArray</span>());\n</code></pre>\n<p>Below is the function definition. Rather than using\n<a href=\"http://en.wikipedia.org/wiki/Polyfill\">polyfills</a>, it relies\n<a href=\"http://underscorejs.org/\">underscore.js</a> (which is included in\n<a href=\"https://www.skratchdot.com/projects/mesh/\">mesh.js</a>).</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/*jslint nomen: true, plusplus: true */</span>\n<span class=\"hljs-comment\">/*global _, DBCollection, print */</span>\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@function</span>\n * <span class=\"hljs-doctag\">@name</span> <span class=\"hljs-variable\">insertArray</span>\n * <span class=\"hljs-doctag\">@memberOf</span> <span class=\"hljs-variable\">DBCollection</span>\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">array</span>} <span class=\"hljs-variable\">arr</span> - The array of objects to insert.\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">object</span>} <span class=\"hljs-variable\">options</span> - pass through to DBCollection.prototype.insert()\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">boolean</span>} <span class=\"hljs-variable\">_allow_dot</span> - pass through to DBCollection.prototype.insert()\n * <span class=\"hljs-doctag\">@throws</span> {<span class=\"hljs-type\">Exception</span>} - when arr is not an Array.\n */</span>\n<span class=\"hljs-title class_\">DBCollection</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">insertArray</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">arr, options, _allow_dot</span>) {\n  <span class=\"hljs-string\">'use strict'</span>;\n  <span class=\"hljs-keyword\">var</span> i, obj;\n  <span class=\"hljs-keyword\">if</span> (_.<span class=\"hljs-title function_\">isArray</span>(arr)) {\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; arr.<span class=\"hljs-property\">length</span>; i++) {\n      obj = arr[i];\n      <span class=\"hljs-keyword\">if</span> (_.<span class=\"hljs-title function_\">isObject</span>(obj) &amp;&amp; !_.<span class=\"hljs-title function_\">isFunction</span>(obj)) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">insert</span>(obj, options, _allow_dot);\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'Cannot insert a non-object, so skipping: '</span> + obj);\n      }\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-string\">'first argument is not an array!'</span>;\n  }\n};\n</code></pre>\n","frontmatter":{"layout":"post","title":"mesh: MongoDB insertArray() addition","published":true,"categories":["MongoDB","Shell"],"tags":["MongoDB","Shell","Shell Extensions","Projects","Update"]}},{"year":"2012","month":"12","day":"10","slug":"new-tabs-and-the-back-button-bookmarklet","filename":"2012-12-10-new-tabs-and-the-back-button-bookmarklet.md","html":"<p>If you're anything like me, then you open new links in tabs. Sometimes,\nif the link has been open for a while, you forget what page you were on when you clicked\nthe link. The back button is disabled since you are in a new tab.</p>\n<p>To get around this issue, I use a simple bookmarklet that takes me back to the document\nreferrer. I place the bookmarklet underneath my back button, so I have easy access to it.</p>\n<p>Here's a screenshot of a disabled back button (in a new tab):</p>\n<p><img src=\"/images/posts/2012/12/10/without.png\" alt=\"without referrer bookmarklet\"></p>\n<p>Here's a screenshot of my browser with the \"referrer\" bookmarklet:</p>\n<p><img src=\"/images/posts/2012/12/10/with.png\" alt=\"with referrer bookmarklet\"></p>\n<p>To install the bookmarklet, drag this link to your bookmark toolbar:</p>\n<p><a href=\"javascript:(function(){document.location=document.referrer;}());\">&lt;&lt; referrer</a></p>\n<p>All the bookmarklet does is:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">location</span> = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">referrer</span>;\n</code></pre>\n","frontmatter":{"layout":"post","title":"New Tabs and the Back Button - Bookmarklet","categories":["Javascript","Bookmarklet"],"tags":["Javascript","Bookmarklet"]}}],"previousTitle":"Older","previousUrl":"/page/2"},"__N_SSG":true}