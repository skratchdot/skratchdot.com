{"pageProps":{"posts":[{"year":"2013","month":"04","day":"13","slug":"npm-dview-a-command-line-tool","filename":"2013-04-13-npm-dview-a-command-line-tool.md","html":"<p>I've been working on a few node apps lately, and have sometimes been specifying specific\nversion numbers in my <a href=\"https://npmjs.org/doc/json.html#dependencies\">package.json</a> files\nrather than using <a href=\"https://npmjs.org/doc/json.html#Tilde-Version-Ranges\">Tilde-Version-Ranges</a>\nor <a href=\"https://npmjs.org/doc/json.html#X-Version-Ranges\">X-Version-Ranges</a>. When specifying specific\nversion numbers, running <code>npm update</code> will not update those packages.</p>\n<p>There's not an easy way to compare the versions you specified in your package.json file\nwith the latest remotely published version.</p>\n<p>In comes <a href=\"/projects/npm-dview\">npm-dview</a> to the rescue. Check out the\n<a href=\"/projects/npm-dview\">project page</a> for screenshots and other usage instructions.</p>\n<p>Or install now by running:</p>\n<pre><code class=\"hljs language-bash\">npm install -g npm-dview\n</code></pre>\n","frontmatter":{"layout":"post","title":"npm-dview - (a command line tool)","categories":["Bash","Shell","Node.js"],"tags":["Bash","Shell","Javascript","Node","Github","Projects"]}},{"year":"2012","month":"11","day":"04","slug":"tojs-a-shell-script","filename":"2012-11-04-tojs-a-shell-script.md","html":"<p>Earlier today I was updating one of my\n<a href=\"http://projects.skratchdot.com/domFormat/bookmarklet/index.html\">bookmarklets</a>\nwhen I ran into the need to convert a html string to a javascript variable.</p>\n<p>I was going to create a quick webpage to do it for me, but that would have still required me\nto do a lot of manual copy-n-pasting (copying the html into a form, clicking a button, and pasting the\nresult into a new file).</p>\n<p>What I really wanted was a one liner that I could use in my terminal.</p>\n<p>I ended up using a combination of <strong>cat</strong> and <strong>sed</strong> to get my desired output. The combined result\nis a shell script called: <a href=\"https://github.com/skratchdot/tojs/\">tojs</a>.</p>\n<p>You can install it by running the following commands:</p>\n<p><strong>NOTE:<br>THE FOLLOWING INSTALLATION INSTRUCTIONS ARE OUTDATED. SEE THE UPDATED SECTION BELOW.</strong></p>\n<pre><code class=\"hljs language-bash\">sudo curl https://raw.github.com/skratchdot/tojs/1.1.0/tojs.sh -o /usr/local/bin/tojs\nsudo <span class=\"hljs-built_in\">chmod</span> +x /usr/local/bin/tojs\n</code></pre>\n<p><strong>UPDATED (12/27/2012):</strong></p>\n<p><a href=\"https://github.com/skratchdot/tojs/\">tojs</a> was converted to a <a href=\"http://nodejs.org/\">node.js</a> project\non December 27th, 2012. Due to this fact, the installation instructions have changed. This project\nnow requires <a href=\"https://npmjs.org/\">npm</a> and can be installed by running:</p>\n<pre><code class=\"hljs language-bash\">npm install -g tojs\n</code></pre>\n","frontmatter":{"layout":"post","title":"tojs - (a shell script)","categories":["Bash","Shell","Node.js"],"tags":["Bash","Shell","Javascript","Bookmarklet","Github","Projects"]}},{"year":"2012","month":"07","day":"14","slug":"osx-screenshot-with-border-from-command-line","filename":"2012-07-14-osx-screenshot-with-border-from-command-line.md","html":"<p>There are a few ways you can take <a href=\"http://guides.macrumors.com/Taking_Screenshots_in_Mac_OS_X\">screenshots in OSX</a>,\nand a few ways you can add borders to images.</p>\n<p>Recently I've found the need to take screenshots of portions of my screen, and add\na border to the resultant images. Most of the methods I was using were very time consuming.</p>\n<p>I decided to script something out so I could easily use the commandline to accomplish this task.</p>\n<p>After some evaluation, I decided to use <a href=\"http://guides.macrumors.com/screencapture\">screencapture</a>\nand <a href=\"http://www.imagemagick.org/\">ImageMagick</a>.</p>\n<p><a href=\"http://www.imagemagick.org/\">ImageMagick</a> comes with of few utilities, one of which is\n<a href=\"http://www.imagemagick.org/script/import.php\">import</a>.</p>\n<p>I could have used that tool exclusively (and not used screencapture) if it weren't for the fact\nthat import relies on the <a href=\"http://en.wikipedia.org/wiki/X_Window_System\">X Window System</a> (in\nOSX it's called X11). I wanted something that could take a screenshot without being in an X11\nwindow.</p>\n<p>In the end, I created a shell script called <a href=\"/projects/framecapture/\">framecapture</a>.</p>\n<p>It's a very basic script:</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-meta\">#!/bin/bash</span>\n\nscreencapture -is <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>\"</span>\nconvert <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>\"</span> -mattecolor blue -frame 6x6+2+2 <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>\"</span>\n</code></pre>\n<p>But I decided to add some error handling, and optional parameters to it.</p>\n<p>You can view it on <a href=\"https://github.com/skratchdot/framecapture/\">Github</a>, or install it by running:</p>\n<pre><code class=\"hljs language-bash\">sudo curl https://raw.github.com/skratchdot/framecapture/master/framecapture.sh -o /usr/local/bin/framecapture\nsudo <span class=\"hljs-built_in\">chmod</span> +x /usr/local/bin/framecapture\n</code></pre>\n","frontmatter":{"layout":"post","title":"OSX Screenshot With Border From Command Line","published":true,"categories":["OSX","Screenshot","Bash","Shell"],"tags":["OSX","Screenshot","ImageMagick","Bash","Shell","screencapture","framecapture","Projects"]}},{"year":"2011","month":"06","day":"05","slug":"git-diff-build-script-aka-read-your-git-docs","filename":"2011-06-05-git-diff-build-script-aka-read-your-git-docs.md","html":"<p>When working in SVN, I have a batch script I've used in the past to create \"DEPLOY\" and \"RESTORE\" folders off of diffs between branches. The script will create a \"DEPLOY\" folder containing all <b>added</b> and <b>modified</b> files, and a \"RESTORE\" folder containing all <b>modified</b> files.</p>\n<p>The purpose of this, is to deploy a set of files to a different environment. I can just copy the \"DEPLOY\" folder to any number of servers. If there is a bug that made it through QA, and we need to immediately rollback changes, we can just copy the \"RESTORE\" folder to all the same servers.</p>\n<p>I just wrote a similar script for Git: <a href=\"https://github.com/skratchdot/Git-Diff-Build-Script\">Git-Diff-Build-Script</a></p>\n<p>While writing that script, I didn't read the Git docs closely enough, and missed the \"git diff\" <b>--diff-filter</b> parameter. Because of this, I thought I would have to use AWK to sanitize my list of files, but then I read about the <b>--diff-filter</b> parameter, and changed 2 lines of code to 1:</p>\n<p><u>USING AWK:</u></p>\n<pre><code class=\"hljs language-bash\">info=<span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(git diff origin/prod origin/dev --name-status)</span>\"</span>\nfiles=<span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(echo <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$info</span>\"</span> | awk '$1 ~/M|A/ {print $2}')</span>\"</span>\n</code></pre>\n<p><u>USING diff-filter:</u></p>\n<pre><code class=\"hljs language-bash\">files=<span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(git diff origin/prod origin/dev --name-only --diff-filter=MA)</span>\"</span>\n</code></pre>\n","frontmatter":{"layout":"post","title":"Git Diff Build Script (AKA read your Git docs)","categories":["Git","Bash","Shell"],"tags":["Ant","AWK","Bash","Shell","Git","SVN"]}}]},"__N_SSG":true}