{"pageProps":{"posts":[{"year":"2013","month":"04","day":"13","slug":"npm-dview-a-command-line-tool","filename":"2013-04-13-npm-dview-a-command-line-tool.md","html":"<p>I've been working on a few node apps lately, and have sometimes been specifying specific\nversion numbers in my <a href=\"https://npmjs.org/doc/json.html#dependencies\">package.json</a> files\nrather than using <a href=\"https://npmjs.org/doc/json.html#Tilde-Version-Ranges\">Tilde-Version-Ranges</a>\nor <a href=\"https://npmjs.org/doc/json.html#X-Version-Ranges\">X-Version-Ranges</a>. When specifying specific\nversion numbers, running <code>npm update</code> will not update those packages.</p>\n<p>There's not an easy way to compare the versions you specified in your package.json file\nwith the latest remotely published version.</p>\n<p>In comes <a href=\"/projects/npm-dview\">npm-dview</a> to the rescue. Check out the\n<a href=\"/projects/npm-dview\">project page</a> for screenshots and other usage instructions.</p>\n<p>Or install now by running:</p>\n<pre><code class=\"hljs language-bash\">npm install -g npm-dview\n</code></pre>\n","frontmatter":{"layout":"post","title":"npm-dview - (a command line tool)","categories":["Bash","Shell","Node.js"],"tags":["Bash","Shell","Javascript","Node","Github","Projects"]}},{"year":"2012","month":"12","day":"12","slug":"mesh-mongodb-insert-array-addition","filename":"2012-12-12-mesh-mongodb-insert-array-addition.md","html":"<p>I just updated <a href=\"https://www.skratchdot.com/projects/mesh/\">mesh - MongoDB Extended Shell</a>\nagain by adding a function that you can call on <a href=\"http://www.mongodb.org/\">MongoDB</a> collections.</p>\n<p>The new function is called <strong>insertArray()</strong>.</p>\n<p>It allows you to insert an array of objects into a collection using a shell version of\n<a href=\"http://en.wikipedia.org/wiki/Syntactic_sugar\">Syntactic Sugar</a>.</p>\n<p>All it does is loop through the array that was passed in, calling\n<strong>DBCollection.insert()</strong> on each object in the array.</p>\n<p>If an item in the array is not an object, it will skip the insert, print a warning, and continue\nprocessing the next item in the array.</p>\n<p>If you don't pass in a valid array, it will throw an error.</p>\n<p>Example uses are:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// insert 2 items into myCollection</span>\n<span class=\"hljs-keyword\">var</span> myArray = [\n  { <span class=\"hljs-attr\">_id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">test</span>: <span class=\"hljs-number\">1</span> },\n  { <span class=\"hljs-attr\">_id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">test</span>: <span class=\"hljs-string\">'foo'</span> },\n];\ndb.<span class=\"hljs-property\">myCollection</span>.<span class=\"hljs-title function_\">insertArray</span>(myArray);\n\n<span class=\"hljs-comment\">// transfer 10 items from collection1 into collection2</span>\ndb.<span class=\"hljs-property\">collection2</span>.<span class=\"hljs-title function_\">insertArray</span>(db.<span class=\"hljs-property\">collection1</span>.<span class=\"hljs-title function_\">find</span>().<span class=\"hljs-title function_\">limit</span>(<span class=\"hljs-number\">10</span>).<span class=\"hljs-title function_\">toArray</span>());\n</code></pre>\n<p>Below is the function definition. Rather than using\n<a href=\"http://en.wikipedia.org/wiki/Polyfill\">polyfills</a>, it relies\n<a href=\"http://underscorejs.org/\">underscore.js</a> (which is included in\n<a href=\"https://www.skratchdot.com/projects/mesh/\">mesh.js</a>).</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/*jslint nomen: true, plusplus: true */</span>\n<span class=\"hljs-comment\">/*global _, DBCollection, print */</span>\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@function</span>\n * <span class=\"hljs-doctag\">@name</span> <span class=\"hljs-variable\">insertArray</span>\n * <span class=\"hljs-doctag\">@memberOf</span> <span class=\"hljs-variable\">DBCollection</span>\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">array</span>} <span class=\"hljs-variable\">arr</span> - The array of objects to insert.\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">object</span>} <span class=\"hljs-variable\">options</span> - pass through to DBCollection.prototype.insert()\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">boolean</span>} <span class=\"hljs-variable\">_allow_dot</span> - pass through to DBCollection.prototype.insert()\n * <span class=\"hljs-doctag\">@throws</span> {<span class=\"hljs-type\">Exception</span>} - when arr is not an Array.\n */</span>\n<span class=\"hljs-title class_\">DBCollection</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">insertArray</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">arr, options, _allow_dot</span>) {\n  <span class=\"hljs-string\">'use strict'</span>;\n  <span class=\"hljs-keyword\">var</span> i, obj;\n  <span class=\"hljs-keyword\">if</span> (_.<span class=\"hljs-title function_\">isArray</span>(arr)) {\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; arr.<span class=\"hljs-property\">length</span>; i++) {\n      obj = arr[i];\n      <span class=\"hljs-keyword\">if</span> (_.<span class=\"hljs-title function_\">isObject</span>(obj) &amp;&amp; !_.<span class=\"hljs-title function_\">isFunction</span>(obj)) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">insert</span>(obj, options, _allow_dot);\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'Cannot insert a non-object, so skipping: '</span> + obj);\n      }\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-string\">'first argument is not an array!'</span>;\n  }\n};\n</code></pre>\n","frontmatter":{"layout":"post","title":"mesh: MongoDB insertArray() addition","published":true,"categories":["MongoDB","Shell"],"tags":["MongoDB","Shell","Shell Extensions","Projects","Update"]}},{"year":"2012","month":"11","day":"04","slug":"tojs-a-shell-script","filename":"2012-11-04-tojs-a-shell-script.md","html":"<p>Earlier today I was updating one of my\n<a href=\"http://projects.skratchdot.com/domFormat/bookmarklet/index.html\">bookmarklets</a>\nwhen I ran into the need to convert a html string to a javascript variable.</p>\n<p>I was going to create a quick webpage to do it for me, but that would have still required me\nto do a lot of manual copy-n-pasting (copying the html into a form, clicking a button, and pasting the\nresult into a new file).</p>\n<p>What I really wanted was a one liner that I could use in my terminal.</p>\n<p>I ended up using a combination of <strong>cat</strong> and <strong>sed</strong> to get my desired output. The combined result\nis a shell script called: <a href=\"https://github.com/skratchdot/tojs/\">tojs</a>.</p>\n<p>You can install it by running the following commands:</p>\n<p><strong>NOTE:<br>THE FOLLOWING INSTALLATION INSTRUCTIONS ARE OUTDATED. SEE THE UPDATED SECTION BELOW.</strong></p>\n<pre><code class=\"hljs language-bash\">sudo curl https://raw.github.com/skratchdot/tojs/1.1.0/tojs.sh -o /usr/local/bin/tojs\nsudo <span class=\"hljs-built_in\">chmod</span> +x /usr/local/bin/tojs\n</code></pre>\n<p><strong>UPDATED (12/27/2012):</strong></p>\n<p><a href=\"https://github.com/skratchdot/tojs/\">tojs</a> was converted to a <a href=\"http://nodejs.org/\">node.js</a> project\non December 27th, 2012. Due to this fact, the installation instructions have changed. This project\nnow requires <a href=\"https://npmjs.org/\">npm</a> and can be installed by running:</p>\n<pre><code class=\"hljs language-bash\">npm install -g tojs\n</code></pre>\n","frontmatter":{"layout":"post","title":"tojs - (a shell script)","categories":["Bash","Shell","Node.js"],"tags":["Bash","Shell","Javascript","Bookmarklet","Github","Projects"]}},{"year":"2012","month":"07","day":"17","slug":"mesh-the-mongodb-extended-shell","filename":"2012-07-17-mesh-the-mongodb-extended-shell.md","html":"<p>I saw a blog post today called:\n<a href=\"http://blog.mongodb.org/post/27406586932/mongo-the-mongodb-shell\">mongo, the MongoDB Shell</a>.</p>\n<p>Since I work in the shell some, and have written a few shell extensions, I decided to create\n<a href=\"/projects/mesh/\">mesh: MongoDB Extended Shell</a>.</p>\n<p>The hope is that it will grow into a collection of community created scripts that add functionality\nto the default mongo shell (while not interfering with it).</p>\n<p>So far, I've included a few utility libraries: <a href=\"http://underscorejs.org\">underscore.js</a>,\n<a href=\"http://epeli.github.com/underscore.string/\">underscore.string.js</a>, and\n<a href=\"http://momentjs.com/\">moment.js</a>.</p>\n<p>I've also included some of the extensions that I've created in the past. Additionally, there's\nsome code so that <strong>\"console\"</strong> calls end up wrapping the built in <strong>print()</strong> function. The idea\nis that eventually I'll add some logic to the console calls so they behave in a more \"standard\" way.</p>\n<p>Another feature is the <strong>mesh.setPrompt()</strong> function. You can pass in a function, or a number 0-4. There\nare a few different types of prompts you can use:</p>\n<ul>\n<li>0: '&gt;' reset to default prompt</li>\n<li>1: 'dbname&gt;'</li>\n<li>2: 'dbname&gt;' for PRIMARY, '(dbname)&gt;' for SECONDARY</li>\n<li>3: 'host:dbname&gt;'</li>\n<li>4: '[YYYY-MM-DD hh:mm:ss] host:dbname&gt;'</li>\n<li>passing in a function() is the same thing as setting: prompt = myFunction()</li>\n</ul>\n<p><strong>mesh.setPrompt()</strong> was inspired by the blog post:\n<a href=\"http://www.kchodorow.com/blog/2011/06/27/ps1/\">http://www.kchodorow.com/blog/2011/06/27/ps1/</a></p>\n<p>Check it out here (and download) here: <a href=\"https://github.com/skratchdot/mesh/\">https://github.com/skratchdot/mesh/</a></p>\n","frontmatter":{"layout":"post","title":"mesh: the MongoDB Extended Shell","published":true,"categories":["MongoDB","Shell"],"tags":["MongoDB","Shell","Shell Extensions","Projects","Update"]}},{"year":"2012","month":"07","day":"14","slug":"osx-screenshot-with-border-from-command-line","filename":"2012-07-14-osx-screenshot-with-border-from-command-line.md","html":"<p>There are a few ways you can take <a href=\"http://guides.macrumors.com/Taking_Screenshots_in_Mac_OS_X\">screenshots in OSX</a>,\nand a few ways you can add borders to images.</p>\n<p>Recently I've found the need to take screenshots of portions of my screen, and add\na border to the resultant images. Most of the methods I was using were very time consuming.</p>\n<p>I decided to script something out so I could easily use the commandline to accomplish this task.</p>\n<p>After some evaluation, I decided to use <a href=\"http://guides.macrumors.com/screencapture\">screencapture</a>\nand <a href=\"http://www.imagemagick.org/\">ImageMagick</a>.</p>\n<p><a href=\"http://www.imagemagick.org/\">ImageMagick</a> comes with of few utilities, one of which is\n<a href=\"http://www.imagemagick.org/script/import.php\">import</a>.</p>\n<p>I could have used that tool exclusively (and not used screencapture) if it weren't for the fact\nthat import relies on the <a href=\"http://en.wikipedia.org/wiki/X_Window_System\">X Window System</a> (in\nOSX it's called X11). I wanted something that could take a screenshot without being in an X11\nwindow.</p>\n<p>In the end, I created a shell script called <a href=\"/projects/framecapture/\">framecapture</a>.</p>\n<p>It's a very basic script:</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-meta\">#!/bin/bash</span>\n\nscreencapture -is <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>\"</span>\nconvert <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>\"</span> -mattecolor blue -frame 6x6+2+2 <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>\"</span>\n</code></pre>\n<p>But I decided to add some error handling, and optional parameters to it.</p>\n<p>You can view it on <a href=\"https://github.com/skratchdot/framecapture/\">Github</a>, or install it by running:</p>\n<pre><code class=\"hljs language-bash\">sudo curl https://raw.github.com/skratchdot/framecapture/master/framecapture.sh -o /usr/local/bin/framecapture\nsudo <span class=\"hljs-built_in\">chmod</span> +x /usr/local/bin/framecapture\n</code></pre>\n","frontmatter":{"layout":"post","title":"OSX Screenshot With Border From Command Line","published":true,"categories":["OSX","Screenshot","Bash","Shell"],"tags":["OSX","Screenshot","ImageMagick","Bash","Shell","screencapture","framecapture","Projects"]}},{"year":"2012","month":"04","day":"30","slug":"mongodb-shell-extensions","filename":"2012-04-30-mongodb-shell-extensions.md","html":"<p>Last Friday I read the blog post <a href=\"http://blog.mongodb.org/post/21923016898/meet-variety-a-schema-analyzer-for-mongodb\">Meet Variety, a Schema Analyzer for MongoDB</a>.</p>\n<p>I tried <a href=\"https://github.com/JamesCropcho/variety/\">Variety</a> out, but it didn't quite do what I wanted, and it also created a few DBs/Collections on my server that I didn't expect.</p>\n<p>Over the weekend, I decided to write my own implementation called: <a href=\"/projects/mongodb-schema\">mongodb-schema</a>. After finishing that script, I created a few more shell extensions.</p>\n<p>Please note, these are just quick examples I whipped up, and are not really meant to be run on large collections (unless you use \"limit\", or are willing to wait a really long time). They are definitely not \"production ready\".</p>\n<p>Here are the scripts:</p>\n<ul>\n<li><p><a href=\"/projects/mongodb-distinct-types\">mongodb-distinct-types</a> - Similar to the db.myCollection.distinct() function, distinctTypes() will return \"types\" rather than \"values\".</p>\n</li>\n<li><p><a href=\"/projects/mongodb-flatten\">mongodb-flatten</a> - The flatten() function is a mapReduce that flattens documents into key/value pairs.</p>\n</li>\n<li><p><a href=\"/projects/mongodb-schema\">mongodb-schema</a> - A schema analysis tool for MongoDB.</p>\n</li>\n<li><p><a href=\"/projects/mongodb-wild\">mongodb-wild</a> - Adds a wildcard search to the mongodb shell.</p>\n</li>\n</ul>\n","frontmatter":{"layout":"post","title":"MongoDB - Shell Extensions","categories":["MongoDB","Shell"],"tags":["MongoDB","Shell","Shell Extensions","Projects","Update"]}},{"year":"2011","month":"06","day":"05","slug":"git-diff-build-script-aka-read-your-git-docs","filename":"2011-06-05-git-diff-build-script-aka-read-your-git-docs.md","html":"<p>When working in SVN, I have a batch script I've used in the past to create \"DEPLOY\" and \"RESTORE\" folders off of diffs between branches. The script will create a \"DEPLOY\" folder containing all <b>added</b> and <b>modified</b> files, and a \"RESTORE\" folder containing all <b>modified</b> files.</p>\n<p>The purpose of this, is to deploy a set of files to a different environment. I can just copy the \"DEPLOY\" folder to any number of servers. If there is a bug that made it through QA, and we need to immediately rollback changes, we can just copy the \"RESTORE\" folder to all the same servers.</p>\n<p>I just wrote a similar script for Git: <a href=\"https://github.com/skratchdot/Git-Diff-Build-Script\">Git-Diff-Build-Script</a></p>\n<p>While writing that script, I didn't read the Git docs closely enough, and missed the \"git diff\" <b>--diff-filter</b> parameter. Because of this, I thought I would have to use AWK to sanitize my list of files, but then I read about the <b>--diff-filter</b> parameter, and changed 2 lines of code to 1:</p>\n<p><u>USING AWK:</u></p>\n<pre><code class=\"hljs language-bash\">info=<span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(git diff origin/prod origin/dev --name-status)</span>\"</span>\nfiles=<span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(echo <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$info</span>\"</span> | awk '$1 ~/M|A/ {print $2}')</span>\"</span>\n</code></pre>\n<p><u>USING diff-filter:</u></p>\n<pre><code class=\"hljs language-bash\">files=<span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(git diff origin/prod origin/dev --name-only --diff-filter=MA)</span>\"</span>\n</code></pre>\n","frontmatter":{"layout":"post","title":"Git Diff Build Script (AKA read your Git docs)","categories":["Git","Bash","Shell"],"tags":["Ant","AWK","Bash","Shell","Git","SVN"]}}]},"__N_SSG":true}