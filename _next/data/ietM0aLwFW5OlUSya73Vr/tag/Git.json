{"pageProps":{"posts":[{"year":"2013","month":"05","day":"19","slug":"userscripts-and-content-security-policy","filename":"2013-05-19-userscripts-and-content-security-policy.md","html":"<p>Last month, Github started to include some\n<a href=\"https://en.wikipedia.org/wiki/Content_Security_Policy\">Content Security Policy Headers</a>.</p>\n<p>They wrote a <a href=\"https://github.com/blog/1477-content-security-policy\">blog post</a> describing\nthe problems CSP headers try to solve, how to prepare your app for including the headers,\nand listed some of the current limitations you may encounter when using the headers.</p>\n<p>I've ran into some of these limitations with the Github userscripts I've authored.</p>\n<p>First off, to make a cross browser userscript, there are a few problems that I've ran into.\nIf your userscript needs to access variables on a page, you can use a few techniques:</p>\n<ul>\n<li><a href=\"http://wiki.greasespot.net/UnsafeWindow\">Unsafe Window</a></li>\n<li><a href=\"http://wiki.greasespot.net/Location_hack\">Location Hack</a></li>\n<li><a href=\"http://wiki.greasespot.net/Content_Script_Injection\">Content Script Injection</a></li>\n</ul>\n<p>Of these three, <strong>Content Script Injection</strong> is the preferred method. It works for both\nFirefox and Chrome. I've been using a variation of that method for most of the scripts I've\nwritten in the past.</p>\n<p>Here's how I would typically write my scripts:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Create some js that you want to inject into the page</span>\n<span class=\"hljs-keyword\">var</span> main = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {};\n\n<span class=\"hljs-comment\">// Inject our main script into the page</span>\n<span class=\"hljs-keyword\">var</span> script = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">'script'</span>);\nscript.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">'('</span> + main.<span class=\"hljs-title function_\">toString</span>() + <span class=\"hljs-string\">')();'</span>;\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">appendChild</span>(script);\n</code></pre>\n<p>After Github started sending CSP headers, my userscripts broke by throwing errors like:</p>\n<pre><code class=\"hljs language-plaintext\">CSP ERROR:  Couldn't parse invalid source 'unsafe-inline'\n</code></pre>\n<p>To fix Firefox, I temporarily removed the <strong>Content Script Injection</strong> hacks I was using. Here's\nan example commit I made back in April:</p>\n<p><a href=\"https://github.com/skratchdot/github-repo-counts.user.js/commit/80f77bc3d588ef5fcd411a3dc77062166b091713\">https://github.com/skratchdot/github-repo-counts.user.js/commit/80f77bc3d588ef5fcd411a3dc77062166b091713</a></p>\n<p>What I forgot when making those commits, is that Chrome userscripts do not work the same way as\nFirefox userscripts.</p>\n<p>To make Chrome userscripts work, I <em>needed</em> to use <strong>Content Script Injection</strong>. The issue is that\nGithub is sending the following CSP headers:</p>\n<pre><code class=\"hljs language-plaintext\">x-content-security-policy: default-src *; script-src https://github.com https://a248.e.akamai.net https://jobs.github.com https://ssl.google-analytics.com https://secure.gaug.es https://collector.githubapp.com https://gist.github.com; style-src https://github.com https://a248.e.akamai.net 'unsafe-inline'; object-src https://github.com https://a248.e.akamai.net\n</code></pre>\n<p>If you notice, I can only use the <strong>Content Script Injection</strong> method from the following domains:</p>\n<ul>\n<li><a href=\"https://github.com\">https://github.com</a></li>\n<li><a href=\"https://a248.e.akamai.net\">https://a248.e.akamai.net</a></li>\n<li><a href=\"https://jobs.github.com\">https://jobs.github.com</a></li>\n<li><a href=\"https://ssl.google-analytics.com\">https://ssl.google-analytics.com</a></li>\n<li><a href=\"https://secure.gaug.es\">https://secure.gaug.es</a></li>\n<li><a href=\"https://collector.githubapp.com\">https://collector.githubapp.com</a></li>\n<li><a href=\"https://gist.github.com\">https://gist.github.com</a></li>\n</ul>\n<p>I had been hotlinking my scripts from the raw.github.com domain.</p>\n<p>To fix, I started hosting my scripts in a <a href=\"https://gist.github.com/skratchdot/5604120\">Gist</a>.</p>\n<p>Since Firefox supports the @require userscript annotation, I rely on that. For Chrome, I am using\n<strong>Content Script Injection</strong>. The reason I didn't use <strong>Content Script Injection</strong> for Firefox, is\nbecause @require does some caching, and I was also experiencing some weird behavior in Firefox in\nwhich certain requests to <a href=\"https://gist.github.com/\">gist.github.com</a> were returning no content\n(0 byte requests)- and my scripts weren't working.</p>\n<p>I haven't experienced that behavior with Chrome requests.</p>\n<p>Another method I was toying with, is by injecting the scripts via an iframe. Go to any\n<a href=\"https://github.com/\">github.com</a> page, and run the following code in Chrome's console:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> injectViaScript = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fn</span>) {\n  <span class=\"hljs-keyword\">var</span> script = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">'script'</span>);\n  script.<span class=\"hljs-property\">textContent</span> = <span class=\"hljs-string\">'('</span> + fn.<span class=\"hljs-title function_\">toString</span>() + <span class=\"hljs-string\">'());'</span>;\n  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">appendChild</span>(script);\n  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">removeChild</span>(script);\n};\n\n<span class=\"hljs-keyword\">var</span> injectViaIframe = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fn</span>) {\n  <span class=\"hljs-keyword\">var</span> fnName = <span class=\"hljs-string\">'dynamic_fn_'</span> + <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">getTime</span>(),\n    iframe = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">'iframe'</span>);\n  iframe.<span class=\"hljs-property\">onload</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    parent.<span class=\"hljs-property\">window</span>[fnName] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Function</span>(<span class=\"hljs-string\">'('</span> + fn.<span class=\"hljs-title function_\">toString</span>() + <span class=\"hljs-string\">'());'</span>);\n    parent.<span class=\"hljs-property\">window</span>[fnName]();\n    parent.<span class=\"hljs-property\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">removeChild</span>(iframe);\n  };\n  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">appendChild</span>(iframe);\n};\n\n<span class=\"hljs-comment\">// This will throw an error</span>\n<span class=\"hljs-title function_\">injectViaScript</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">'Hello from script!'</span>);\n});\n\n<span class=\"hljs-comment\">// This will work</span>\n<span class=\"hljs-title function_\">injectViaIframe</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">'Hello from iframe!'</span>);\n});\n</code></pre>\n<p>That seemed like an approach I could take, but was running into scoping issues, so\ngave up trying. I ended up settling on the @require method for Firefox, and the\n<strong>Content Script Injection</strong> from <a href=\"https://gist.github.com/\">gist.github.com</a> for Chrome.</p>\n","frontmatter":{"layout":"post","title":"Userscripts and Content Security Policy","published":true,"categories":["Userscript","Javascript"],"tags":["Userscript","Javascript","Git","Github","CSP"]}},{"year":"2013","month":"05","day":"19","slug":"github-enhancement-suite","filename":"2013-05-19-github-enhancement-suite.md","html":"<p>I've created quite a few <a href=\"https://github.com\">Github</a> userscripts to help enhance my experience\nwhen checking out code online. The scripts either add functionality I wish existed, functionality\nI've seen other people request, or functionality that once existed but was removed.</p>\n<p>With the recent <a href=\"/2013/05/userscripts-and-content-security-policy/\">CSP Headers</a> that were added\nto the site, I had to make changes to all my scripts. Since it is starting to be a pain to manage\nso many scripts, and it's even a bigger pain for people if they want to install all of them,\nI've consolidated them all into one script:</p>\n<p><a href=\"https://github.com/skratchdot/github-enhancement-suite\">The Github Enhancement Suite</a>.</p>\n<p>Eventually, I might make this a legitimate browser extension, and add functionality for turning\nfeatures on and off. I'll also probably clean up the code, and decommission the \"one off\" scripts.</p>\n<p>At the time of this writing, here are the scripts that are included:</p>\n<ul>\n<li><a href=\"https://github.com/skratchdot/github-code-search.user.js\">Github: Code Search</a></li>\n<li><a href=\"https://github.com/skratchdot/github-editor-theme.user.js\">Github: Editor Theme</a></li>\n<li><a href=\"https://github.com/skratchdot/github-fork-count.user.js\">Github: Fork Count</a></li>\n<li><a href=\"https://github.com/skratchdot/github-get-missing-descriptions.user.js\">Github: Get Missing Descriptions</a></li>\n<li><a href=\"https://github.com/skratchdot/github-gh-pages-link.user.js\">Github: gh-pages Link</a></li>\n<li><a href=\"https://github.com/skratchdot/github-pull-request-links.user.js\">Github: Pull Request Links</a></li>\n<li><a href=\"https://github.com/skratchdot/github-repo-counts.user.js\">Github: Repo Counts</a></li>\n<li><a href=\"https://github.com/skratchdot/github-repo-filter-info.user.js\">Github: Repo Filter Info</a></li>\n<li><a href=\"https://github.com/skratchdot/github-twitter-link.user.js\">Github: Twitter Link</a></li>\n</ul>\n","frontmatter":{"layout":"post","title":"Github Enhancement Suite","published":true,"categories":["Userscript","Javascript"],"tags":["Userscript","Javascript","Git","Github","Projects"]}},{"year":"2012","month":"12","day":"08","slug":"userscript-github-editor-theme","filename":"2012-12-08-userscript-github-editor-theme.md","html":"<p>Yesterday I saw the following post on <a href=\"http://news.ycombinator.com/\">HackerNews</a>:</p>\n<p><a href=\"http://news.ycombinator.com/item?id=4886560\">Let's make GitHub better, together</a>.</p>\n<p>I saw the section on <a href=\"http://letsmake.github.com/bettertogether/#ace\">Revamping Inline Editing</a>,\nand noticed one of the comments was about the way <a href=\"https://github.com/\">Github</a> uses the\n<a href=\"https://github.com/ajaxorg/ace\">Ace Editor</a>.</p>\n<p>Since I've been working with <a href=\"https://github.com/ajaxorg/ace\">Ace</a> some recently, I decided\nto work on a userscript that let's you switch themes on Github.</p>\n<p><strong>You can check it out here:</strong></p>\n<ul>\n<li><p><a href=\"https://www.skratchdot.com/projects/github-editor-theme.user.js/\">Project Page</a></p>\n</li>\n<li><p><a href=\"https://github.com/skratchdot/github-editor-theme.user.js/\">Github Page</a></p>\n</li>\n<li><p><a href=\"https://github.com/skratchdot/github-editor-theme.user.js/raw/master/github-editor-theme.user.js\">Install</a></p>\n</li>\n</ul>\n<p>Here is the current description from <a href=\"https://raw.github.com/skratchdot/github-editor-theme.user.js/master/README.md\">README.md</a>:</p>\n<h3 id=\"description\">Description</h3>\n<p>Add a \"theme\" dropdown when editing files in the Github UI.</p>\n<h3 id=\"screenshots\">Screenshots</h3>\n<h4 id=\"before-installing-the-user-script\">Before installing the user script:</h4>\n<p><img src=\"https://github.com/skratchdot/github-editor-theme.user.js/raw/master/images/before.png\" alt=\"Before Installation\"></p>\n<h4 id=\"after-installing-the-user-script\">After installing the user script:</h4>\n<p><img src=\"https://github.com/skratchdot/github-editor-theme.user.js/raw/master/images/after.png\" alt=\"After Installation\"></p>\n","frontmatter":{"layout":"post","title":"Userscript - Github: Editor Theme","categories":["Userscript","Javascript"],"tags":["Userscript","Javascript","Git","Github","Projects"]}},{"year":"2012","month":"08","day":"12","slug":"userscript-github-get-missing-descriptions","filename":"2012-08-12-userscript-github-get-missing-descriptions.md","html":"<p>On <a href=\"https://github.com\">Github</a> profiles, not all the repositories\nhave description info listed underneath them. Only the repositories\nwith recent updates contain detailed information.</p>\n<p>This is necessary for users with a large number of repos so that page\nload times are acceptable (also, there's no need to show all repo info\nfor someone with 1000+ repos).</p>\n<p>To find out more about older repositories, you have to visit each repo page.</p>\n<p>To help out with this manual process, I've created:\n<a href=\"https://github.com/skratchdot/github-get-missing-descriptions.user.js/\">Github: Get Missing Descriptions</a>.</p>\n<p>This script adds a button that will update \"simple\" repo listings with the\nproject's description, as well as the last time it was updated. Each button\nclick will make a max of 50 ajax requests. If there are more than 50 repos without\ndescriptions, you will have to click the button multiple times.</p>\n<p><strong>You can check it out here:</strong></p>\n<ul>\n<li><p><a href=\"https://www.skratchdot.com/projects/github-get-missing-descriptions.user.js/\">Project Page</a></p>\n</li>\n<li><p><a href=\"https://github.com/skratchdot/github-get-missing-descriptions.user.js/\">Github Page</a></p>\n</li>\n<li><p><a href=\"https://github.com/skratchdot/github-get-missing-descriptions.user.js/raw/master/github-get-missing-descriptions.user.js\">Install</a></p>\n</li>\n</ul>\n<p>Here is the current description from <a href=\"https://raw.github.com/skratchdot/github-get-missing-descriptions.user.js/master/README.md\">README.md</a>:</p>\n<h3 id=\"description\">Description</h3>\n<p>If there are missing descriptions on a Github profile page,\na button will be added. When clicked, ajax requests will be made\nto grab the descriptions.</p>\n<h3 id=\"screenshots\">Screenshots</h3>\n<h4 id=\"before-installing-the-user-script\">Before installing the user script:</h4>\n<p><img src=\"https://github.com/skratchdot/github-get-missing-descriptions.user.js/raw/master/images/before.png\" alt=\"Before Installation\"></p>\n<h4 id=\"after-installing-the-user-script\">After installing the user script:</h4>\n<p><strong>Before clicking the button:</strong><br><img src=\"https://github.com/skratchdot/github-get-missing-descriptions.user.js/raw/master/images/after1.png\" alt=\"After Installation (before clicking the button)\"></p>\n<p><strong>After clicking the button:</strong><br><img src=\"https://github.com/skratchdot/github-get-missing-descriptions.user.js/raw/master/images/after2.png\" alt=\"After Installation (after clicking the button)\"></p>\n","frontmatter":{"layout":"post","title":"Userscript - Github: Get Missing Descriptions","categories":["Userscript","Javascript"],"tags":["Userscript","Javascript","Git","Github","Projects"]}},{"year":"2012","month":"07","day":"05","slug":"userscript-github-twitter-link","filename":"2012-07-05-userscript-github-twitter-link.md","html":"<p>While browsing <a href=\"https://github.com\">Github</a> profiles, I notice I'll frequently\nchange the url from <a href=\"https://github.com\">github.com</a> to <a href=\"https://twitter.com\">twitter.com</a>\nto see if that particular user has a <a href=\"https://twitter.com\">Twitter</a> account.</p>\n<p>To save on some of that manual activity, I created a new userscript today:\n<a href=\"https://github.com/skratchdot/github-twitter-link.user.js/\">Github: Twitter Link</a>.</p>\n<p><strong>You can check it out here:</strong></p>\n<ul>\n<li><p><a href=\"https://www.skratchdot.com/projects/github-twitter-link.user.js/\">Project Page</a></p>\n</li>\n<li><p><a href=\"https://github.com/skratchdot/github-twitter-link.user.js/\">Github Page</a></p>\n</li>\n<li><p><a href=\"https://github.com/skratchdot/github-twitter-link.user.js/raw/master/github-twitter-link.user.js\">Install</a></p>\n</li>\n</ul>\n<p>Here is the current description from <a href=\"https://raw.github.com/skratchdot/github-twitter-link.user.js/master/README.md\">README.md</a>:</p>\n<h3 id=\"description\">Description</h3>\n<p>This is a user script that adds a twitter link on Github profile\npages if a corresponding user name exists at Twitter. It utilizes\nlocal storage to minimize multiple Twitter API requests. If a corresponding\nuser name is not found, then we will not check for it again. At some point I\nmay add a \"time limit\" on when to check again.</p>\n<h3 id=\"screenshots\">Screenshots</h3>\n<h4 id=\"before-installing-the-user-script\">Before installing the user script:</h4>\n<p><img src=\"https://github.com/skratchdot/github-twitter-link.user.js/raw/master/images/before.png\" alt=\"Before Installation\"></p>\n<h4 id=\"after-installing-the-user-script\">After installing the user script:</h4>\n<p><strong>Twitter account exists:</strong><br><img src=\"https://github.com/skratchdot/github-twitter-link.user.js/raw/master/images/after1.png\" alt=\"After Installation - Account exists\"></p>\n<p><strong>Twitter account doesn't exist:</strong><br><img src=\"https://github.com/skratchdot/github-twitter-link.user.js/raw/master/images/after2.png\" alt=\"After Installation - Account doesn't exist\"></p>\n","frontmatter":{"layout":"post","title":"Userscript - Github: Twitter Link","categories":["Userscript","Javascript"],"tags":["Userscript","Javascript","Git","Github","Twitter","Projects"]}},{"year":"2011","month":"06","day":"05","slug":"git-diff-build-script-aka-read-your-git-docs","filename":"2011-06-05-git-diff-build-script-aka-read-your-git-docs.md","html":"<p>When working in SVN, I have a batch script I've used in the past to create \"DEPLOY\" and \"RESTORE\" folders off of diffs between branches. The script will create a \"DEPLOY\" folder containing all <b>added</b> and <b>modified</b> files, and a \"RESTORE\" folder containing all <b>modified</b> files.</p>\n<p>The purpose of this, is to deploy a set of files to a different environment. I can just copy the \"DEPLOY\" folder to any number of servers. If there is a bug that made it through QA, and we need to immediately rollback changes, we can just copy the \"RESTORE\" folder to all the same servers.</p>\n<p>I just wrote a similar script for Git: <a href=\"https://github.com/skratchdot/Git-Diff-Build-Script\">Git-Diff-Build-Script</a></p>\n<p>While writing that script, I didn't read the Git docs closely enough, and missed the \"git diff\" <b>--diff-filter</b> parameter. Because of this, I thought I would have to use AWK to sanitize my list of files, but then I read about the <b>--diff-filter</b> parameter, and changed 2 lines of code to 1:</p>\n<p><u>USING AWK:</u></p>\n<pre><code class=\"hljs language-bash\">info=<span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(git diff origin/prod origin/dev --name-status)</span>\"</span>\nfiles=<span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(echo <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$info</span>\"</span> | awk '$1 ~/M|A/ {print $2}')</span>\"</span>\n</code></pre>\n<p><u>USING diff-filter:</u></p>\n<pre><code class=\"hljs language-bash\">files=<span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(git diff origin/prod origin/dev --name-only --diff-filter=MA)</span>\"</span>\n</code></pre>\n","frontmatter":{"layout":"post","title":"Git Diff Build Script (AKA read your Git docs)","categories":["Git","Bash","Shell"],"tags":["Ant","AWK","Bash","Shell","Git","SVN"]}}]},"__N_SSG":true}